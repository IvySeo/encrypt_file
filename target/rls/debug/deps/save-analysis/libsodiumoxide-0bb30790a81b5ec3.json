{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5","program":"C:\\Users\\M7\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","sodiumoxide","C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=0bb30790a81b5ec3","-C","extra-filename=-0bb30790a81b5ec3","--out-dir","c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps","--extern","libc=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\liblibc-24275681abfc3e09.rmeta","--extern","libsodium_sys=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\liblibsodium_sys-cf323613519c9a02.rmeta","--extern","serde=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\libserde-1fdd427a80af7479.rmeta","--cap-lints","allow","-L","native=C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\libsodium-sys-0.2.5\\msvc/x64/Debug/v140/","--error-format=json","--sysroot","C:\\Users\\M7\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\libsodiumoxide-0bb30790a81b5ec3.rmeta"},"prelude":{"crate_id":{"name":"sodiumoxide","disambiguator":[471597877904143009,13973666623614049497]},"crate_root":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src","external_crates":[{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2953284957370121905,516218847044108999]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\secretstream_macros.rs","num":2,"id":{"name":"core","disambiguator":[4886921161452974022,9452701908620647308]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3203561457090851205,4632072058037203867]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3169376498131592849,9803978538207206865]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9199649512872691809,295485750221223515]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8443236399884245798,5222098755004489868]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6875631416372754603,10839808870381595949]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1502820548942319655,12324332090615114041]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[430706850608609257,9838809896428719127]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14503357713055743246,17731918345561731946]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[5693586899772496405,17220236988479499600]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1060170945230123807,4750192540160149325]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[5837979218880944404,14867613958503134191]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":14,"id":{"name":"libsodium_sys","disambiguator":[216478021848650279,4186692217220163598]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":15,"id":{"name":"libc","disambiguator":[1432246772928408741,17177198715115564129]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":16,"id":{"name":"serde","disambiguator":[15260896925816581321,4292443209839639195]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","num":17,"id":{"name":"serde_derive","disambiguator":[13760733970214819548,14797591247033493564]}}],"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":0,"byte_end":3863,"line_start":1,"line_end":128,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27541,"byte_end":27542,"line_start":44,"line_end":44,"column_start":38,"column_end":39},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":35}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56235,"byte_end":56236,"line_start":68,"line_end":68,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":66}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":77124,"byte_end":77125,"line_start":77,"line_end":77,"column_start":43,"column_end":44},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":102}},{"kind":"Use","ref_id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106434,"byte_end":106440,"line_start":14,"line_end":14,"column_start":23,"column_end":29},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":136}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118513,"byte_end":118514,"line_start":44,"line_end":44,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":212}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131542,"byte_end":131543,"line_start":38,"line_end":38,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":232}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141976,"byte_end":141977,"line_start":31,"line_end":31,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":252}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151134,"byte_end":151135,"line_start":68,"line_end":68,"column_start":37,"column_end":38},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":262}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232798,"byte_end":232799,"line_start":37,"line_end":37,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":320}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240250,"byte_end":240251,"line_start":29,"line_end":29,"column_start":50,"column_end":51},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":330}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244691,"byte_end":244692,"line_start":36,"line_end":36,"column_start":33,"column_end":34},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":339}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259836,"byte_end":259837,"line_start":73,"line_end":73,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":356}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287287,"byte_end":287288,"line_start":24,"line_end":24,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":376}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295707,"byte_end":295708,"line_start":43,"line_end":43,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":388}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317093,"byte_end":317094,"line_start":96,"line_end":96,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":423}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":0,"byte_end":3863,"line_start":1,"line_end":128,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":26},{"krate":0,"index":34}],"decl_id":null,"docs":" Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).","sig":null,"attributes":[{"value":"! Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Sodium is a portable implementation of Dan Bernsteins [`NaCl`: Networking and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":86,"byte_end":167,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"! Cryptography library](http://nacl.cr.yp.to)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":168,"byte_end":215,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":216,"byte_end":219,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! For most users, if you want public-key (asymmetric) cryptography you should use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":220,"byte_end":303,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"! the functions in [`crypto::box_`](crypto/box_/index.html) for encryption/decryption.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":304,"byte_end":392,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":393,"byte_end":396,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! If you want secret-key (symmetric) cryptography you should be using the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":397,"byte_end":472,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"! functions in [`crypto::secretbox`](crypto/secretbox/index.html) for encryption/decryption.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":473,"byte_end":567,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":568,"byte_end":571,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! For public-key signatures you should use the functions in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":572,"byte_end":633,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"! [`crypto::sign`](crypto/sign/index.html) for signature creation and verification.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":634,"byte_end":719,"line_start":13,"line_end":13,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":720,"byte_end":723,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! Unless you know what you're doing you most certainly don't want to use the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":724,"byte_end":802,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"! functions in [`crypto::scalarmult`](crypto/scalarmult/index.html),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":803,"byte_end":873,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"! [`crypto::stream`](crypto/stream/index.html), [`crypto::auth`](crypto/auth/index.html) and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":874,"byte_end":968,"line_start":17,"line_end":17,"column_start":1,"column_end":95}},{"value":"! [`crypto::onetimeauth`](crypto/onetimeauth/index.html).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":969,"byte_end":1028,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1029,"byte_end":1032,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! ## Thread Safety","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1033,"byte_end":1053,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"! All functions in this library are thread-safe provided that the [`init()`](fn.init.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1054,"byte_end":1146,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"! function has been called during program execution.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1147,"byte_end":1201,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1202,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! If [`init()`](fn.init.html) hasn't been called then all functions except the random-number","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1206,"byte_end":1300,"line_start":24,"line_end":24,"column_start":1,"column_end":95}},{"value":"! generation functions and the key-generation functions are thread-safe.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1301,"byte_end":1375,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1376,"byte_end":1379,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Public-key cryptography","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1380,"byte_end":1409,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"!  [`crypto::box_`](crypto/box_/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1410,"byte_end":1455,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1456,"byte_end":1459,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"!  [`crypto::sign`](crypto/sign/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1460,"byte_end":1505,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1506,"byte_end":1509,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! # Sealed boxes","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1510,"byte_end":1528,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"!  [`crypto::sealedbox`](crypto/sealedbox/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1529,"byte_end":1584,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1585,"byte_end":1588,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! # Secret-key cryptography","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1589,"byte_end":1618,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"!  [`crypto::secretbox`](crypto/secretbox/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1619,"byte_end":1674,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1675,"byte_end":1678,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"!  [`crypto::secretstream`](crypto/secretstream/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1679,"byte_end":1740,"line_start":38,"line_end":38,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1741,"byte_end":1744,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"!  [`crypto::stream`](crypto/stream/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1745,"byte_end":1794,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1795,"byte_end":1798,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"!  [`crypto::auth`](crypto/auth/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1799,"byte_end":1844,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1845,"byte_end":1848,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"!  [`crypto::onetimeauth`](crypto/onetimeauth/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1849,"byte_end":1908,"line_start":44,"line_end":44,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1909,"byte_end":1912,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! # Low-level functions","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1913,"byte_end":1938,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"!  [`crypto::hash`](crypto/hash/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1939,"byte_end":1984,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1985,"byte_end":1988,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!  [`crypto::verify`](crypto/verify/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":1989,"byte_end":2038,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2039,"byte_end":2042,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"!  [`crypto::shorthash`](crypto/shorthash/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2043,"byte_end":2098,"line_start":51,"line_end":51,"column_start":1,"column_end":56}},{"value":"crate_name = \"sodiumoxide\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2100,"byte_end":2130,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"crate_type = \"lib\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2131,"byte_end":2153,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2154,"byte_end":2176,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"warn(non_upper_case_globals)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2177,"byte_end":2209,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"warn(non_camel_case_types)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2210,"byte_end":2240,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2241,"byte_end":2272,"line_start":58,"line_end":58,"column_start":1,"column_end":32}},{"value":"deny(clippy :: all)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2367,"byte_end":2388,"line_start":61,"line_end":61,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3241,"byte_end":3245,"line_start":93,"line_end":93,"column_start":8,"column_end":12},"name":"init","qualname":"::init","value":"fn () -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `init()` initializes the sodium library and chooses faster versions of\n the primitives if possible. `init()` also makes the random number generation\n functions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)\n thread-safe","sig":null,"attributes":[{"value":"/ `init()` initializes the sodium library and chooses faster versions of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2891,"byte_end":2965,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/ the primitives if possible. `init()` also makes the random number generation","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":2966,"byte_end":3046,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ functions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3047,"byte_end":3135,"line_start":89,"line_end":89,"column_start":1,"column_end":89}},{"value":"/ thread-safe","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3136,"byte_end":3151,"line_start":90,"line_end":90,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3152,"byte_end":3155,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ `init()` returns `Ok` if initialization succeeded and `Err` if it failed.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3156,"byte_end":3233,"line_start":92,"line_end":92,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"randombytes","qualname":"::randombytes","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" Cryptographic random number generation.\n","sig":null,"attributes":[{"value":"! Cryptographic random number generation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14608,"byte_end":14651,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14943,"byte_end":14954,"line_start":12,"line_end":12,"column_start":8,"column_end":19},"name":"randombytes","qualname":"::randombytes::randombytes","value":"fn (size: usize) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" `randombytes()` randomly generates size bytes of data.","sig":null,"attributes":[{"value":"/ `randombytes()` randomly generates size bytes of data.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14708,"byte_end":14766,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14767,"byte_end":14770,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `randombytes()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14771,"byte_end":14843,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14844,"byte_end":14913,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":14914,"byte_end":14935,"line_start":11,"line_end":11,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15363,"byte_end":15379,"line_start":25,"line_end":25,"column_start":8,"column_end":24},"name":"randombytes_into","qualname":"::randombytes::randombytes_into","value":"fn (buf: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" `randombytes_into()` fills a buffer `buf` with random data.","sig":null,"attributes":[{"value":"/ `randombytes_into()` fills a buffer `buf` with random data.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15118,"byte_end":15181,"line_start":20,"line_end":20,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15182,"byte_end":15185,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `randombytes_into()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15186,"byte_end":15263,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15264,"byte_end":15333,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15334,"byte_end":15355,"line_start":24,"line_end":24,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15977,"byte_end":15996,"line_start":40,"line_end":40,"column_start":8,"column_end":27},"name":"randombytes_uniform","qualname":"::randombytes::randombytes_uniform","value":"fn (upper_bound: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" `randombytes_uniform()` returns an unpredictable value between 0 and\n `upper_bound` (excluded). It guarantees a uniform distribution of the\n possible output values even when `upper_bound` is not a power of 2. Note\n that an `upper_bound` < 2 leaves only a  single element to be chosen, namely\n 0.","sig":null,"attributes":[{"value":"/ `randombytes_uniform()` returns an unpredictable value between 0 and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15489,"byte_end":15561,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ `upper_bound` (excluded). It guarantees a uniform distribution of the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15562,"byte_end":15635,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ possible output values even when `upper_bound` is not a power of 2. Note","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15636,"byte_end":15712,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ that an `upper_bound` < 2 leaves only a  single element to be chosen, namely","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15713,"byte_end":15793,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ 0.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15794,"byte_end":15800,"line_start":35,"line_end":35,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15801,"byte_end":15804,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `randombytes()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15805,"byte_end":15877,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15878,"byte_end":15947,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\randombytes.rs","byte_start":15948,"byte_end":15969,"line_start":39,"line_end":39,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Libsodium utility functions\n","sig":null,"attributes":[{"value":"! Libsodium utility functions","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16519,"byte_end":16550,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16687,"byte_end":16694,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"memzero","qualname":"::utils::memzero","value":"fn (x: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" `memzero()` tries to effectively zero out the data in `x` even if\n optimizations are being applied to the code.\n","sig":null,"attributes":[{"value":"/ `memzero()` tries to effectively zero out the data in `x` even if","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16561,"byte_end":16630,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/ optimizations are being applied to the code.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16631,"byte_end":16679,"line_start":5,"line_end":5,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17385,"byte_end":17391,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"memcmp","qualname":"::utils::memcmp","value":"fn (x: &[u8], y: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `memcmp()` returns true if `x[0]`, `x[1]`, ..., `x[len-1]` are the\n same as `y[0]`, `y[1]`, ..., `y[len-1]`. Otherwise it returns `false`.","sig":null,"attributes":[{"value":"/ `memcmp()` returns true if `x[0]`, `x[1]`, ..., `x[len-1]` are the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16797,"byte_end":16867,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/ same as `y[0]`, `y[1]`, ..., `y[len-1]`. Otherwise it returns `false`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16868,"byte_end":16942,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16943,"byte_end":16946,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This function is safe to use for secrets `x[0]`, `x[1]`, ..., `x[len-1]`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":16947,"byte_end":17024,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ `y[0]`, `y[1]`, ..., `y[len-1]`. The time taken by `memcmp` is independent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17025,"byte_end":17103,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ of the contents of `x[0]`, `x[1]`, ..., `x[len-1]`, `y[0]`, `y[1]`, ..., `y[len-1]`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17104,"byte_end":17192,"line_start":17,"line_end":17,"column_start":1,"column_end":89}},{"value":"/ In contrast, the standard C comparison function `memcmp(x,y,len)` takes time","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17193,"byte_end":17273,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ that depends on the longest matching prefix of `x` and `y`, often allowing easy","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17274,"byte_end":17357,"line_start":19,"line_end":19,"column_start":1,"column_end":84}},{"value":"/ timing attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17358,"byte_end":17377,"line_start":20,"line_end":20,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17847,"byte_end":17852,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"mlock","qualname":"::utils::mlock","value":"fn (x: &mut [u8]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `mlock()` locks memory given region which can help avoiding swapping the\n sensitive memory region to disk.","sig":null,"attributes":[{"value":"/ `mlock()` locks memory given region which can help avoiding swapping the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17577,"byte_end":17653,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ sensitive memory region to disk.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17654,"byte_end":17690,"line_start":29,"line_end":29,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17691,"byte_end":17694,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Operating system might limit the amount of memory a process can `mlock()`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17695,"byte_end":17773,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ This function can fail if `mlock()` fails to lock the memory.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":17774,"byte_end":17839,"line_start":32,"line_end":32,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18221,"byte_end":18228,"line_start":46,"line_end":46,"column_start":8,"column_end":15},"name":"munlock","qualname":"::utils::munlock","value":"fn (x: &mut [u8]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `munlock()` unlocks memory region.","sig":null,"attributes":[{"value":"/ `munlock()` unlocks memory region.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18037,"byte_end":18075,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18076,"byte_end":18079,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ `munlock()` overwrites the region with zeros before unlocking it, so it","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18080,"byte_end":18155,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ doesn't have to be done before calling this function.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18156,"byte_end":18213,"line_start":45,"line_end":45,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18985,"byte_end":18997,"line_start":67,"line_end":67,"column_start":8,"column_end":20},"name":"increment_le","qualname":"::utils::increment_le","value":"fn (x: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" `increment_le()` treats `x` as an unsigned little-endian number and increments it in\n constant time.","sig":null,"attributes":[{"value":"/ `increment_le()` treats `x` as an unsigned little-endian number and increments it in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18524,"byte_end":18612,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ constant time.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18613,"byte_end":18631,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18632,"byte_end":18635,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ WARNING: this method does not check for arithmetic overflow. When used for incrementing","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18636,"byte_end":18727,"line_start":62,"line_end":62,"column_start":1,"column_end":92}},{"value":"/ nonces it is the caller's responsibility to ensure that any given nonce value","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18728,"byte_end":18809,"line_start":63,"line_end":63,"column_start":1,"column_end":82}},{"value":"/ is used only once.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18810,"byte_end":18832,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"/ If the caller does not do that the cryptographic primitives in sodiumoxide","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18833,"byte_end":18911,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ will not uphold any security guarantees (i.e. they may break)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":18912,"byte_end":18977,"line_start":66,"line_end":66,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19611,"byte_end":19617,"line_start":82,"line_end":82,"column_start":8,"column_end":14},"name":"add_le","qualname":"::utils::add_le","value":"fn (x: &mut [u8], y: &[u8]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `add_le()` treats `x` and `y` as unsigned little-endian numbers and adds `y` to `x`\n modulo 2^(8*len) in constant time.","sig":null,"attributes":[{"value":"/ `add_le()` treats `x` and `y` as unsigned little-endian numbers and adds `y` to `x`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19092,"byte_end":19179,"line_start":73,"line_end":73,"column_start":1,"column_end":88}},{"value":"/ modulo 2^(8*len) in constant time.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19180,"byte_end":19218,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19219,"byte_end":19222,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ `add_le()` will return Err<()> if the length of `x` is not equal to the length of `y`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19223,"byte_end":19313,"line_start":76,"line_end":76,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19314,"byte_end":19317,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ WARNING: When used for incrementing nonces it is the caller's responsibility to ensure","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19318,"byte_end":19408,"line_start":78,"line_end":78,"column_start":1,"column_end":91}},{"value":"/ that any given nonce value is used only once.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19409,"byte_end":19458,"line_start":79,"line_end":79,"column_start":1,"column_end":50}},{"value":"/ If the caller does not do that the cryptographic primitives in sodiumoxide","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19459,"byte_end":19537,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ will not uphold any security guarantees (i.e. they may break)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\utils.rs","byte_start":19538,"byte_end":19603,"line_start":81,"line_end":81,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"version","qualname":"::version","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Libsodium version functions\n","sig":null,"attributes":[{"value":"! Libsodium version functions","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25166,"byte_end":25197,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25322,"byte_end":25336,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"version_string","qualname":"::version::version_string","value":"fn () -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" `version_string()` returns the version string from libsodium.\n","sig":null,"attributes":[{"value":"/ `version_string()` returns the version string from libsodium.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25249,"byte_end":25314,"line_start":8,"line_end":8,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25762,"byte_end":25775,"line_start":20,"line_end":20,"column_start":8,"column_end":21},"name":"version_major","qualname":"::version::version_major","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" `version_major()` returns the major version from libsodium.\n","sig":null,"attributes":[{"value":"/ `version_major()` returns the major version from libsodium.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25691,"byte_end":25754,"line_start":19,"line_end":19,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25923,"byte_end":25936,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"version_minor","qualname":"::version::version_minor","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" `version_minor()` returns the minor version from libsodium.\n","sig":null,"attributes":[{"value":"/ `version_minor()` returns the minor version from libsodium.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\version.rs","byte_start":25852,"byte_end":25915,"line_start":24,"line_end":24,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3518,"byte_end":3524,"line_start":111,"line_end":111,"column_start":9,"column_end":15},"name":"crypto","qualname":"::crypto","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":66},{"krate":0,"index":102},{"krate":0,"index":136},{"krate":0,"index":212},{"krate":0,"index":232},{"krate":0,"index":252},{"krate":0,"index":262},{"krate":0,"index":320},{"krate":0,"index":330},{"krate":0,"index":339},{"krate":0,"index":356},{"krate":0,"index":376},{"krate":0,"index":388},{"krate":0,"index":423},{"krate":0,"index":455}],"decl_id":null,"docs":" Cryptographic functions\n","sig":null,"attributes":[{"value":"/ Cryptographic functions","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3482,"byte_end":3509,"line_start":110,"line_end":110,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aead","qualname":"::crypto::aead","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":48},{"krate":0,"index":57}],"decl_id":null,"docs":" Authenticated Encryption with Additional Data\n This operation:","sig":null,"attributes":[{"value":"! Authenticated Encryption with Additional Data","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26173,"byte_end":26222,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"! This operation:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26223,"byte_end":26242,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26243,"byte_end":26246,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! - Encrypts a message with a key and a nonce to keep it confidential","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26247,"byte_end":26318,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"! - Computes an authentication tag. This tag is used to make sure that the message,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26319,"byte_end":26404,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"!   as well as optional, non-confidential (non-encrypted) data, haven't been tampered with.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26405,"byte_end":26498,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26499,"byte_end":26502,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26503,"byte_end":26527,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"! `seal()`, `seal_detached()`, `open()` and `open_detached()` are currently","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26528,"byte_end":26605,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! an implementation of `chacha20poly1305_ietf`, i.e. the IETF construction defined in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26606,"byte_end":26693,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"! <https://tools.ietf.org/html/rfc7539>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26694,"byte_end":26736,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26737,"byte_end":26740,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! # Example (combined mode)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26741,"byte_end":26770,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26771,"byte_end":26778,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::aead;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26779,"byte_end":26813,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26814,"byte_end":26817,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! let k = aead::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26818,"byte_end":26846,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"! let n = aead::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26847,"byte_end":26877,"line_start":18,"line_end":18,"column_start":1,"column_end":31}},{"value":"! let m = b\"Some plaintext\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26878,"byte_end":26908,"line_start":19,"line_end":19,"column_start":1,"column_end":31}},{"value":"! let ad = b\"Some additional data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26909,"byte_end":26946,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26947,"byte_end":26950,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! let c = aead::seal(m, Some(ad), &n, &k);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26951,"byte_end":26995,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"! let m2 = aead::open(&c, Some(ad), &n, &k).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":26996,"byte_end":27051,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27052,"byte_end":27055,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! assert_eq!(&m[..], &m2[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27056,"byte_end":27088,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"!```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27089,"byte_end":27095,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27096,"byte_end":27099,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! # Example (detached mode)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27100,"byte_end":27129,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27130,"byte_end":27137,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::aead;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27138,"byte_end":27172,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27173,"byte_end":27176,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! let k = aead::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27177,"byte_end":27205,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"! let n = aead::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27206,"byte_end":27236,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"! let mut m = [0x41, 0x42, 0x43, 0x44];","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27237,"byte_end":27278,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"! let m2 = m.clone();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27279,"byte_end":27302,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"! let ad = b\"Some additional data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27303,"byte_end":27340,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27341,"byte_end":27344,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! let t = aead::seal_detached(&mut m, Some(ad), &n, &k);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27345,"byte_end":27403,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"! aead::open_detached(&mut m, Some(ad), &t, &n, &k).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27404,"byte_end":27467,"line_start":39,"line_end":39,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27468,"byte_end":27471,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! assert_eq!(m, m2);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27472,"byte_end":27494,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27495,"byte_end":27502,"line_start":42,"line_end":42,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha20poly1305","qualname":"::crypto::aead::chacha20poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":485},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":541},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":535},{"krate":0,"index":539},{"krate":0,"index":600},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":483}],"decl_id":null,"docs":" The original ChaCha20-Poly1305 construction can safely encrypt a pratically\n unlimited number of messages with the same key, without any practical limit\n to the size of a message (up to ~ 2^64 bytes).\n","sig":null,"attributes":[{"value":"! The original ChaCha20-Poly1305 construction can safely encrypt a pratically","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305.rs","byte_start":36494,"byte_end":36573,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"! unlimited number of messages with the same key, without any practical limit","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305.rs","byte_start":36574,"byte_end":36653,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! to the size of a message (up to ~ 2^64 bytes).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305.rs","byte_start":36654,"byte_end":36704,"line_start":3,"line_end":3,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305_ietf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha20poly1305_ietf","qualname":"::crypto::aead::chacha20poly1305_ietf","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305_ietf.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":675},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":731},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":790},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":673}],"decl_id":null,"docs":" The IETF variant of the ChaCha20-Poly1305 construction can safely encrypt a\n practically unlimited number of messages, but individual messages cannot\n exceed 64*(2^32)-64 bytes (approximatively 256 GB).\n","sig":null,"attributes":[{"value":"! The IETF variant of the ChaCha20-Poly1305 construction can safely encrypt a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305_ietf.rs","byte_start":38367,"byte_end":38446,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"! practically unlimited number of messages, but individual messages cannot","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305_ietf.rs","byte_start":38447,"byte_end":38523,"line_start":2,"line_end":2,"column_start":1,"column_end":77}},{"value":"! exceed 64*(2^32)-64 bytes (approximatively 256 GB).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\chacha20poly1305_ietf.rs","byte_start":38524,"byte_end":38579,"line_start":3,"line_end":3,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xchacha20poly1305_ietf","qualname":"::crypto::aead::xchacha20poly1305_ietf","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":865},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":899},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":921},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":915},{"krate":0,"index":919},{"krate":0,"index":980},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1029},{"krate":0,"index":1031},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":863}],"decl_id":null,"docs":" The XChaCha20-Poly1305 construction can safely encrypt a practically\n unlimited number of messages with the same key, without any practical limit\n to the size of the message (up to ~ 2^64 bytes).","sig":null,"attributes":[{"value":"! The XChaCha20-Poly1305 construction can safely encrypt a practically","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":49786,"byte_end":49858,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"! unlimited number of messages with the same key, without any practical limit","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":49859,"byte_end":49938,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! to the size of the message (up to ~ 2^64 bytes).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":49939,"byte_end":49991,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":49992,"byte_end":49995,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! As an alternative to counters, its large nonce size (192-bit) allows random","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":49996,"byte_end":50075,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! nonces to be safely used","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":50076,"byte_end":50104,"line_start":6,"line_end":6,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":50105,"byte_end":50108,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! For this reason, and if interoperability with other libraries is not a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":50109,"byte_end":50183,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"! concern, this is the recommended AEAD construction.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\xchacha20poly1305_ietf.rs","byte_start":50184,"byte_end":50239,"line_start":9,"line_end":9,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"auth","qualname":"::crypto::auth","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":82},{"krate":0,"index":92}],"decl_id":null,"docs":" Secret-key authentication","sig":null,"attributes":[{"value":"! Secret-key authentication","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53521,"byte_end":53550,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53551,"byte_end":53554,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53555,"byte_end":53575,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The `authenticate()` function, viewed as a function of the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53576,"byte_end":53638,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"! message for a uniform random key, is designed to meet the standard","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53639,"byte_end":53709,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"! notion of unforgeability. This means that an attacker cannot find","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53710,"byte_end":53779,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"! authenticators for any messages not authenticated by the sender, even if","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53780,"byte_end":53856,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"! the attacker has adaptively influenced the messages authenticated by the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53857,"byte_end":53933,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"! sender. For a formal definition see, e.g., Section 2.4 of Bellare,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":53934,"byte_end":54004,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"! Kilian, and Rogaway, \"The security of the cipher block chaining message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54005,"byte_end":54080,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"! authentication code,\" Journal of Computer and System Sciences 61 (2000),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54081,"byte_end":54157,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! 362–399; <http://www-cse.ucsd.edu/~mihir/papers/cbc.html>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54158,"byte_end":54222,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54223,"byte_end":54226,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! `NaCl` does not make any promises regarding \"strong\" unforgeability;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54227,"byte_end":54299,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"! perhaps one valid authenticator can be converted into another valid","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54300,"byte_end":54371,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"! authenticator for the same message. `NaCl` also does not make any promises","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54372,"byte_end":54450,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"! regarding \"truncated unforgeability.\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54451,"byte_end":54492,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54493,"byte_end":54496,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54497,"byte_end":54521,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"! `authenticate()` is currently an implementation of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54522,"byte_end":54576,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"! `HMAC-SHA-512-256`, i.e., the first 256 bits of `HMAC-SHA-512`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54577,"byte_end":54644,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"! `HMAC-SHA-512-256` is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54645,"byte_end":54713,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"! unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54714,"byte_end":54733,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54734,"byte_end":54737,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! # Alternate primitives","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54738,"byte_end":54764,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"! `NaCl` supports the following secret-key authentication functions:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54765,"byte_end":54835,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54836,"byte_end":54839,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! -----------------------------------------------------------------","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54840,"byte_end":54909,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"! |`crypto_auth`               |primitive          |BYTES|KEYBYTES|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54910,"byte_end":54979,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"! |----------------------------|-------------------|-----|--------|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":54980,"byte_end":55049,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"! |`crypto_auth_hmacsha256`    |`HMAC_SHA-256`     |32   |32      |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55050,"byte_end":55119,"line_start":31,"line_end":31,"column_start":1,"column_end":70}},{"value":"! |`crypto_auth_hmacsha512256` |`HMAC_SHA-512-256` |32   |32      |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55120,"byte_end":55189,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"! |`crypto_auth_hmacsha512`    |`HMAC_SHA-512`     |64   |32      |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55190,"byte_end":55259,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55260,"byte_end":55263,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! # Example (simple interface)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55264,"byte_end":55296,"line_start":35,"line_end":35,"column_start":1,"column_end":33}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55297,"byte_end":55304,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::auth;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55305,"byte_end":55339,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55340,"byte_end":55343,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! let key = auth::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55344,"byte_end":55374,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"! let data_to_authenticate = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55375,"byte_end":55419,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"! let tag = auth::authenticate(data_to_authenticate, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55420,"byte_end":55481,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"! assert!(auth::verify(&tag, data_to_authenticate, &key));","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55482,"byte_end":55542,"line_start":42,"line_end":42,"column_start":1,"column_end":61}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55543,"byte_end":55550,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55551,"byte_end":55554,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! # Example (streaming interface)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55555,"byte_end":55590,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55591,"byte_end":55598,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::auth;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55599,"byte_end":55633,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"! use sodiumoxide::randombytes;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55634,"byte_end":55667,"line_start":48,"line_end":48,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55668,"byte_end":55671,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! let key = randombytes::randombytes(123);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55672,"byte_end":55716,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55717,"byte_end":55720,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! let data_part_1 = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55721,"byte_end":55756,"line_start":52,"line_end":52,"column_start":1,"column_end":36}},{"value":"! let data_part_2 = b\"some other data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55757,"byte_end":55798,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"! let mut state = auth::State::init(&key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55799,"byte_end":55843,"line_start":54,"line_end":54,"column_start":1,"column_end":45}},{"value":"! state.update(data_part_1);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55844,"byte_end":55874,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"! state.update(data_part_2);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55875,"byte_end":55905,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"! let tag1 = state.finalize();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55906,"byte_end":55938,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55939,"byte_end":55942,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! let data_2_part_1 = b\"some datasome \";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55943,"byte_end":55985,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"! let data_2_part_2 = b\"other data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":55986,"byte_end":56024,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"! let mut state = auth::State::init(&key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56025,"byte_end":56069,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"! state.update(data_2_part_1);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56070,"byte_end":56102,"line_start":62,"line_end":62,"column_start":1,"column_end":33}},{"value":"! state.update(data_2_part_2);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56103,"byte_end":56135,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"! let tag2 = state.finalize();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56136,"byte_end":56168,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! assert_eq!(tag1, tag2);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56169,"byte_end":56196,"line_start":65,"line_end":65,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56197,"byte_end":56204,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha256.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hmacsha256","qualname":"::crypto::auth::hmacsha256","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha256.rs","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1045},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1098},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1161}],"decl_id":null,"docs":" `HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of\n unforgeability.\n","sig":null,"attributes":[{"value":"! `HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha256.rs","byte_start":64473,"byte_end":64552,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"! unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha256.rs","byte_start":64553,"byte_end":64572,"line_start":2,"line_end":2,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hmacsha512","qualname":"::crypto::auth::hmacsha512","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512.rs","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1175},{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1228},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1291}],"decl_id":null,"docs":" `HMAC-SHA-512` `HMAC-SHA-512` is conjectured to meet the standard notion of\n unforgeability.\n","sig":null,"attributes":[{"value":"! `HMAC-SHA-512` `HMAC-SHA-512` is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512.rs","byte_start":67476,"byte_end":67555,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"! unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512.rs","byte_start":67556,"byte_end":67575,"line_start":2,"line_end":2,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512256.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hmacsha512256","qualname":"::crypto::auth::hmacsha512256","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512256.rs","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1305},{"krate":0,"index":1315},{"krate":0,"index":1317},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1313},{"krate":0,"index":1358},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1421}],"decl_id":null,"docs":" `HMAC-SHA-512-256`, i.e., the first 256 bits of\n `HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion\n of unforgeability.\n","sig":null,"attributes":[{"value":"! `HMAC-SHA-512-256`, i.e., the first 256 bits of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512256.rs","byte_start":70695,"byte_end":70746,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"! `HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512256.rs","byte_start":70747,"byte_end":70829,"line_start":2,"line_end":2,"column_start":1,"column_end":83}},{"value":"! of unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\hmacsha512256.rs","byte_start":70830,"byte_end":70852,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"box_","qualname":"::crypto::box_","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" Public-key authenticated encryption","sig":null,"attributes":[{"value":"! Public-key authenticated encryption","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73377,"byte_end":73416,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73417,"byte_end":73420,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73421,"byte_end":73441,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The `seal()` function is designed to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73442,"byte_end":73523,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"! third-party unforgeability for a public-key authenticated-encryption scheme","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73524,"byte_end":73603,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! using nonces. For formal definitions see, e.g., Jee Hea An, \"Authenticated","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73604,"byte_end":73682,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"! encryption in the public-key setting: security notions and analyses,\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73683,"byte_end":73756,"line_start":7,"line_end":7,"column_start":1,"column_end":74}},{"value":"! <http://eprint.iacr.org/2001/079>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73757,"byte_end":73795,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73796,"byte_end":73799,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Distinct messages between the same {sender, receiver} set are required","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73800,"byte_end":73874,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"! to have distinct nonces. For example, the lexicographically smaller","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73875,"byte_end":73946,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"! public key can use nonce 1 for its first message to the other key, nonce","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":73947,"byte_end":74023,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! 3 for its second message, nonce 5 for its third message, etc., while the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74024,"byte_end":74100,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"! lexicographically larger public key uses nonce 2 for its first message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74101,"byte_end":74175,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"! to the other key, nonce 4 for its second message, nonce 6 for its third","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74176,"byte_end":74251,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"! message, etc. Nonces are long enough that randomly generated nonces have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74252,"byte_end":74328,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"! negligible risk of collision.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74329,"byte_end":74362,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74363,"byte_end":74366,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! There is no harm in having the same nonce for different messages if the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74367,"byte_end":74442,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"! {sender, receiver} sets are different. This is true even if the sets","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74443,"byte_end":74515,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"! overlap. For example, a sender can use the same nonce for two different","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74516,"byte_end":74591,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"! messages if the messages are sent to two different public keys.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74592,"byte_end":74659,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74660,"byte_end":74663,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! The `seal()` function is not meant to provide non-repudiation. On the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74664,"byte_end":74737,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"! contrary: the `seal()` function guarantees repudiability. A receiver","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74738,"byte_end":74810,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"! can freely modify a boxed message, and therefore cannot convince third","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74811,"byte_end":74885,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"! parties that this particular message came from the sender. The sender","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74886,"byte_end":74959,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"! and receiver are nevertheless protected against forgeries by other","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":74960,"byte_end":75030,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"! parties. In the terminology of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75031,"byte_end":75065,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"! <http://groups.google.com/group/sci.crypt/msg/ec5c18b23b11d82c>,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75066,"byte_end":75134,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"! crypto_box uses \"public-key authenticators\" rather than \"public-key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75135,"byte_end":75206,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"! signatures.\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75207,"byte_end":75223,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75224,"byte_end":75227,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Users who want public verifiability (or receiver-assisted public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75228,"byte_end":75296,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"! verifiability) should instead use signatures (or signcryption).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75297,"byte_end":75364,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"! Signature support is a high priority for `NaCl`; a signature API will be","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75365,"byte_end":75441,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! described in subsequent `NaCl` documentation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75442,"byte_end":75491,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75492,"byte_end":75495,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75496,"byte_end":75520,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"! `seal()` is `crypto_box_curve25519xsalsa20poly1305` , a particular","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75521,"byte_end":75591,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"! combination of Curve25519, Salsa20, and Poly1305 specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75592,"byte_end":75657,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75658,"byte_end":75720,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75721,"byte_end":75724,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! This function is conjectured to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75725,"byte_end":75801,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! third-party unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75802,"byte_end":75833,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75834,"byte_end":75837,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! # Example (simple interface)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75838,"byte_end":75870,"line_start":47,"line_end":47,"column_start":1,"column_end":33}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75871,"byte_end":75878,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::box_;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75879,"byte_end":75913,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75914,"byte_end":75917,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! let (ourpk, oursk) = box_::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75918,"byte_end":75963,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"! // normally theirpk is sent by the other party","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":75964,"byte_end":76014,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! let (theirpk, theirsk) = box_::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76015,"byte_end":76064,"line_start":53,"line_end":53,"column_start":1,"column_end":50}},{"value":"! let nonce = box_::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76065,"byte_end":76099,"line_start":54,"line_end":54,"column_start":1,"column_end":35}},{"value":"! let plaintext = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76100,"byte_end":76133,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"! let ciphertext = box_::seal(plaintext, &nonce, &theirpk, &oursk);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76134,"byte_end":76203,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"! let their_plaintext = box_::open(&ciphertext, &nonce, &ourpk, &theirsk).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76204,"byte_end":76289,"line_start":57,"line_end":57,"column_start":1,"column_end":86}},{"value":"! assert!(plaintext == &their_plaintext[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76290,"byte_end":76337,"line_start":58,"line_end":58,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76338,"byte_end":76345,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"! # Example (precomputation interface)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76346,"byte_end":76386,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76387,"byte_end":76394,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::box_;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76395,"byte_end":76429,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76430,"byte_end":76433,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! let (ourpk, oursk) = box_::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76434,"byte_end":76479,"line_start":64,"line_end":64,"column_start":1,"column_end":46}},{"value":"! let (theirpk, theirsk) = box_::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76480,"byte_end":76529,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"! let our_precomputed_key = box_::precompute(&theirpk, &oursk);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76530,"byte_end":76595,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"! let nonce = box_::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76596,"byte_end":76630,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"! let plaintext = b\"plaintext\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76631,"byte_end":76664,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"! let ciphertext = box_::seal_precomputed(plaintext, &nonce, &our_precomputed_key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76665,"byte_end":76750,"line_start":69,"line_end":69,"column_start":1,"column_end":86}},{"value":"! // this will be identical to our_precomputed_key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76751,"byte_end":76803,"line_start":70,"line_end":70,"column_start":1,"column_end":53}},{"value":"! let their_precomputed_key = box_::precompute(&ourpk, &theirsk);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76804,"byte_end":76871,"line_start":71,"line_end":71,"column_start":1,"column_end":68}},{"value":"! let their_plaintext = box_::open_precomputed(&ciphertext, &nonce,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76872,"byte_end":76941,"line_start":72,"line_end":72,"column_start":1,"column_end":70}},{"value":"!                                              &their_precomputed_key).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":76942,"byte_end":77024,"line_start":73,"line_end":73,"column_start":1,"column_end":83}},{"value":"! assert!(plaintext == &their_plaintext[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":77025,"byte_end":77072,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":77073,"byte_end":77080,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve25519xsalsa20poly1305","qualname":"::crypto::box_::curve25519xsalsa20poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":1426},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1476},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1484},{"krate":0,"index":1529},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":113},{"krate":0,"index":1588},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1602},{"krate":0,"index":1617},{"krate":0,"index":1619},{"krate":0,"index":1622},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1650},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1687},{"krate":0,"index":1690},{"krate":0,"index":1693},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1644},{"krate":0,"index":1648},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":1706},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1725},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1714},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" `crypto_box_curve25519xsalsa20poly1305` , a particular\n combination of Curve25519, Salsa20, and Poly1305 specified in\n [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","sig":null,"attributes":[{"value":"! `crypto_box_curve25519xsalsa20poly1305` , a particular","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77164,"byte_end":77222,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"! combination of Curve25519, Salsa20, and Poly1305 specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77223,"byte_end":77288,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77289,"byte_end":77351,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77352,"byte_end":77355,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! This function is conjectured to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77356,"byte_end":77432,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"! third-party unforgeability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77433,"byte_end":77464,"line_start":6,"line_end":6,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77599,"byte_end":77608,"line_start":14,"line_end":14,"column_start":11,"column_end":20},"name":"SEEDBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::SEEDBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Seed`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Seed`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77556,"byte_end":77588,"line_start":13,"line_end":13,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77730,"byte_end":77744,"line_start":17,"line_end":17,"column_start":11,"column_end":25},"name":"PUBLICKEYBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::PUBLICKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `PublicKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `PublicKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77682,"byte_end":77719,"line_start":16,"line_end":16,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77875,"byte_end":77889,"line_start":21,"line_end":21,"column_start":11,"column_end":25},"name":"SECRETKEYBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::SECRETKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `SecretKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77827,"byte_end":77864,"line_start":20,"line_end":20,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78016,"byte_end":78026,"line_start":25,"line_end":25,"column_start":11,"column_end":21},"name":"NONCEBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::NONCEBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Nonce`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Nonce`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":77972,"byte_end":78005,"line_start":24,"line_end":24,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78154,"byte_end":78173,"line_start":28,"line_end":28,"column_start":11,"column_end":30},"name":"PRECOMPUTEDKEYBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::PRECOMPUTEDKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `PrecomputedKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `PrecomputedKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78101,"byte_end":78143,"line_start":27,"line_end":27,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78421,"byte_end":78429,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"MACBYTES","qualname":"::crypto::box_::curve25519xsalsa20poly1305::MACBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in the authenticator tag of an encrypted message\n i.e. the number of bytes by which the ciphertext is larger than the\n plaintext.\n","sig":null,"attributes":[{"value":"/ Number of bytes in the authenticator tag of an encrypted message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78255,"byte_end":78323,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/ i.e. the number of bytes by which the ciphertext is larger than the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78324,"byte_end":78395,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ plaintext.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78396,"byte_end":78410,"line_start":33,"line_end":33,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78798,"byte_end":78802,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Seed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::Seed","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Seed` that can be used for keypair generation","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1476},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":78994,"byte_end":79003,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::crypto::box_::curve25519xsalsa20poly1305::SecretKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `SecretKey` for asymmetric authenticated encryption","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79107,"byte_end":79116,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::crypto::box_::curve25519xsalsa20poly1305::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `PublicKey` for asymmetric authenticated encryption\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79249,"byte_end":79259,"line_start":62,"line_end":62,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey>::public_key","value":"fn (&self) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" `public_key()` computes the corresponding public key for a given secret key\n","sig":null,"attributes":[{"value":"/ `public_key()` computes the corresponding public key for a given secret key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79158,"byte_end":79237,"line_start":61,"line_end":61,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79653,"byte_end":79656,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"Tag","qualname":"::crypto::box_::curve25519xsalsa20poly1305::Tag","value":"","parent":null,"children":[],"decl_id":null,"docs":" Authentication `Tag` for the detached encryption mode","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1650},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79749,"byte_end":79754,"line_start":80,"line_end":80,"column_start":11,"column_end":16},"name":"Nonce","qualname":"::crypto::box_::curve25519xsalsa20poly1305::Nonce","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Nonce` for asymmetric authenticated encryption\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12788,"byte_end":12799,"line_start":255,"line_end":255,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80031,"byte_end":80042,"line_start":88,"line_end":88,"column_start":8,"column_end":19},"name":"gen_keypair","qualname":"::crypto::box_::curve25519xsalsa20poly1305::gen_keypair","value":"fn () -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `gen_keypair()` randomly generates a secret key and a corresponding public key.","sig":null,"attributes":[{"value":"/ `gen_keypair()` randomly generates a secret key and a corresponding public key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79771,"byte_end":79854,"line_start":83,"line_end":83,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79855,"byte_end":79858,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_keypair()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79859,"byte_end":79931,"line_start":85,"line_end":85,"column_start":1,"column_end":73}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79932,"byte_end":80001,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80002,"byte_end":80023,"line_start":87,"line_end":87,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80620,"byte_end":80637,"line_start":102,"line_end":102,"column_start":8,"column_end":25},"name":"keypair_from_seed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::keypair_from_seed","value":"fn (seed: &Seed) -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `key_pair_from_seed()` deterministically derives a key pair from a single key seed (crypto_box_SEEDBYTES bytes).","sig":null,"attributes":[{"value":"/ `key_pair_from_seed()` deterministically derives a key pair from a single key seed (crypto_box_SEEDBYTES bytes).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80320,"byte_end":80436,"line_start":97,"line_end":97,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80437,"byte_end":80440,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `key_pair_from_seed()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80441,"byte_end":80520,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80521,"byte_end":80590,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80591,"byte_end":80612,"line_start":101,"line_end":101,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81214,"byte_end":81223,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"gen_nonce","qualname":"::crypto::box_::curve25519xsalsa20poly1305::gen_nonce","value":"fn () -> Nonce","parent":null,"children":[],"decl_id":null,"docs":" `gen_nonce()` randomly generates a nonce","sig":null,"attributes":[{"value":"/ `gen_nonce()` randomly generates a nonce","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":80995,"byte_end":81039,"line_start":115,"line_end":115,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81040,"byte_end":81043,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_nonce()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81044,"byte_end":81114,"line_start":117,"line_end":117,"column_start":1,"column_end":71}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81115,"byte_end":81184,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81185,"byte_end":81206,"line_start":119,"line_end":119,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81492,"byte_end":81496,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"seal","qualname":"::crypto::box_::curve25519xsalsa20poly1305::seal","value":"fn (m: &[u8], n: &Nonce, pk: &PublicKey, sk: &SecretKey) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" `seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,\n the receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.\n","sig":null,"attributes":[{"value":"/ `seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81316,"byte_end":81404,"line_start":126,"line_end":126,"column_start":1,"column_end":89}},{"value":"/ the receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81405,"byte_end":81484,"line_start":127,"line_end":127,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82202,"byte_end":82215,"line_start":149,"line_end":149,"column_start":8,"column_end":21},"name":"seal_detached","qualname":"::crypto::box_::curve25519xsalsa20poly1305::seal_detached","value":"fn (m: &mut [u8], n: &Nonce, pk: &PublicKey, sk: &SecretKey) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" `seal_detached()` encrypts and authenticates a message `m` using the senders secret key `sk`,\n the receivers public key `pk` and a nonce `n`. `m` is encrypted in place, so after this\n function returns it will contain the ciphertext. The detached authentication tag is returned by\n value.\n","sig":null,"attributes":[{"value":"/ `seal_detached()` encrypts and authenticates a message `m` using the senders secret key `sk`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81894,"byte_end":81991,"line_start":145,"line_end":145,"column_start":1,"column_end":98}},{"value":"/ the receivers public key `pk` and a nonce `n`. `m` is encrypted in place, so after this","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":81992,"byte_end":82083,"line_start":146,"line_end":146,"column_start":1,"column_end":92}},{"value":"/ function returns it will contain the ciphertext. The detached authentication tag is returned by","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82084,"byte_end":82183,"line_start":147,"line_end":147,"column_start":1,"column_end":100}},{"value":"/ value.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82184,"byte_end":82194,"line_start":148,"line_end":148,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82835,"byte_end":82839,"line_start":168,"line_end":168,"column_start":8,"column_end":12},"name":"open","qualname":"::crypto::box_::curve25519xsalsa20poly1305::open","value":"fn (c: &[u8], n: &Nonce, pk: &PublicKey, sk: &SecretKey) -> Result<Vec<u8>, ()>","parent":null,"children":[],"decl_id":null,"docs":" `open()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,\n the senders public key `pk`, and a nonce `n`. It returns a plaintext `Ok(m)`.\n If the ciphertext fails verification, `open()` returns `Err(())`.\n","sig":null,"attributes":[{"value":"/ `open()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82586,"byte_end":82675,"line_start":165,"line_end":165,"column_start":1,"column_end":90}},{"value":"/ the senders public key `pk`, and a nonce `n`. It returns a plaintext `Ok(m)`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82676,"byte_end":82757,"line_start":166,"line_end":166,"column_start":1,"column_end":82}},{"value":"/ If the ciphertext fails verification, `open()` returns `Err(())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":82758,"byte_end":82827,"line_start":167,"line_end":167,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":83750,"byte_end":83763,"line_start":196,"line_end":196,"column_start":8,"column_end":21},"name":"open_detached","qualname":"::crypto::box_::curve25519xsalsa20poly1305::open_detached","value":"fn (c: &mut [u8], mac: &Tag, n: &Nonce, pk: &PublicKey, sk: &SecretKey) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `open_detached()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,\n the senders public key `pk`, and a nonce `n`. `c` is decrypted in place, so if this function is\n successful it will contain the plaintext. If the ciphertext fails verification,\n `open_detached()` returns `Err(())`, and the ciphertext is not modified.\n","sig":null,"attributes":[{"value":"/ `open_detached()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":83383,"byte_end":83481,"line_start":192,"line_end":192,"column_start":1,"column_end":99}},{"value":"/ the senders public key `pk`, and a nonce `n`. `c` is decrypted in place, so if this function is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":83482,"byte_end":83581,"line_start":193,"line_end":193,"column_start":1,"column_end":100}},{"value":"/ successful it will contain the plaintext. If the ciphertext fails verification,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":83582,"byte_end":83665,"line_start":194,"line_end":194,"column_start":1,"column_end":84}},{"value":"/ `open_detached()` returns `Err(())`, and the ciphertext is not modified.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":83666,"byte_end":83742,"line_start":195,"line_end":195,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":84682,"byte_end":84696,"line_start":228,"line_end":228,"column_start":12,"column_end":26},"name":"PrecomputedKey","qualname":"::crypto::box_::curve25519xsalsa20poly1305::PrecomputedKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" Applications that send several messages to the same receiver can gain speed by\n splitting `seal()` into two steps, `precompute()` and `seal_precomputed()`.\n Similarly, applications that receive several messages from the same sender can gain\n speed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":84847,"byte_end":84857,"line_start":233,"line_end":233,"column_start":8,"column_end":18},"name":"precompute","qualname":"::crypto::box_::curve25519xsalsa20poly1305::precompute","value":"fn (pk: &PublicKey, sk: &SecretKey) -> PrecomputedKey","parent":null,"children":[],"decl_id":null,"docs":" `precompute()` computes an intermediate key that can be used by `seal_precomputed()`\n and `open_precomputed()`\n","sig":null,"attributes":[{"value":"/ `precompute()` computes an intermediate key that can be used by `seal_precomputed()`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":84722,"byte_end":84810,"line_start":231,"line_end":231,"column_start":1,"column_end":89}},{"value":"/ and `open_precomputed()`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":84811,"byte_end":84839,"line_start":232,"line_end":232,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85306,"byte_end":85322,"line_start":247,"line_end":247,"column_start":8,"column_end":24},"name":"seal_precomputed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::seal_precomputed","value":"fn (m: &[u8], n: &Nonce, k: &PrecomputedKey) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" `seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,\n and a nonce `n`. It returns a ciphertext `c`.\n","sig":null,"attributes":[{"value":"/ `seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85154,"byte_end":85248,"line_start":245,"line_end":245,"column_start":1,"column_end":95}},{"value":"/ and a nonce `n`. It returns a ciphertext `c`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85249,"byte_end":85298,"line_start":246,"line_end":246,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85967,"byte_end":85992,"line_start":266,"line_end":266,"column_start":8,"column_end":33},"name":"seal_detached_precomputed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::seal_detached_precomputed","value":"fn (m: &mut [u8], n: &Nonce, k: &PrecomputedKey) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" `seal_detached_precomputed()` encrypts and authenticates a message `m` using a precomputed key\n `k` and a nonce `n`. `m` is encrypted in place, so after this function returns it will contain\n the ciphertext. The detached authentication tag is returned by value.\n","sig":null,"attributes":[{"value":"/ `seal_detached_precomputed()` encrypts and authenticates a message `m` using a precomputed key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85688,"byte_end":85786,"line_start":263,"line_end":263,"column_start":1,"column_end":99}},{"value":"/ `k` and a nonce `n`. `m` is encrypted in place, so after this function returns it will contain","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85787,"byte_end":85885,"line_start":264,"line_end":264,"column_start":1,"column_end":99}},{"value":"/ the ciphertext. The detached authentication tag is returned by value.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":85886,"byte_end":85959,"line_start":265,"line_end":265,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":86565,"byte_end":86581,"line_start":284,"line_end":284,"column_start":8,"column_end":24},"name":"open_precomputed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::open_precomputed","value":"fn (c: &[u8], n: &Nonce, k: &PrecomputedKey) -> Result<Vec<u8>, ()>","parent":null,"children":[],"decl_id":null,"docs":" `open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed\n key `k` and a nonce `n`. It returns a plaintext `Ok(m)`.\n If the ciphertext fails verification, `open_precomputed()` returns `Err(())`.\n","sig":null,"attributes":[{"value":"/ `open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":86331,"byte_end":86414,"line_start":281,"line_end":281,"column_start":1,"column_end":84}},{"value":"/ key `k` and a nonce `n`. It returns a plaintext `Ok(m)`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":86415,"byte_end":86475,"line_start":282,"line_end":282,"column_start":1,"column_end":61}},{"value":"/ If the ciphertext fails verification, `open_precomputed()` returns `Err(())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":86476,"byte_end":86557,"line_start":283,"line_end":283,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":87433,"byte_end":87458,"line_start":311,"line_end":311,"column_start":8,"column_end":33},"name":"open_detached_precomputed","qualname":"::crypto::box_::curve25519xsalsa20poly1305::open_detached_precomputed","value":"fn (c: &mut [u8], mac: &Tag, n: &Nonce, k: &PrecomputedKey) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `open_detached_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed key\n `k` and a nonce `n`. `c` is decrypted in place, so if this function is successful it will\n contain the plaintext. If the ciphertext fails verification, `open_detached()` returns\n `Err(())`, and the ciphertext is not modified.\n","sig":null,"attributes":[{"value":"/ `open_detached_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":87093,"byte_end":87189,"line_start":307,"line_end":307,"column_start":1,"column_end":97}},{"value":"/ `k` and a nonce `n`. `c` is decrypted in place, so if this function is successful it will","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":87190,"byte_end":87283,"line_start":308,"line_end":308,"column_start":1,"column_end":94}},{"value":"/ contain the plaintext. If the ciphertext fails verification, `open_detached()` returns","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":87284,"byte_end":87374,"line_start":309,"line_end":309,"column_start":1,"column_end":91}},{"value":"/ `Err(())`, and the ciphertext is not modified.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":87375,"byte_end":87425,"line_start":310,"line_end":310,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generichash","qualname":"::crypto::generichash","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":207}],"decl_id":null,"docs":" `GenericHash`.","sig":null,"attributes":[{"value":"! `GenericHash`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106068,"byte_end":106086,"line_start":1,"line_end":1,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106087,"byte_end":106090,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113367,"byte_end":113373,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Digest","qualname":"::crypto::generichash::digest::Digest","value":"Digest {  }","parent":null,"children":[{"krate":0,"index":1757},{"krate":0,"index":1758}],"decl_id":null,"docs":" Digest-structure","sig":null,"attributes":[{"value":"/ Digest-structure","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113194,"byte_end":113214,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113215,"byte_end":113218,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This structure contains a fixed sized array as a buffer and a length to","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113219,"byte_end":113294,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ represent dynamic sized digest outputs.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113295,"byte_end":113338,"line_start":10,"line_end":10,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106497,"byte_end":106507,"line_start":17,"line_end":17,"column_start":11,"column_end":21},"name":"DIGEST_MIN","qualname":"::crypto::generichash::DIGEST_MIN","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Minimium of allowed bytes in a `Digest`\n","sig":null,"attributes":[{"value":"/ Minimium of allowed bytes in a `Digest`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106443,"byte_end":106486,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106610,"byte_end":106620,"line_start":20,"line_end":20,"column_start":11,"column_end":21},"name":"DIGEST_MAX","qualname":"::crypto::generichash::DIGEST_MAX","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum of allowed bytes in a `Digest`\n","sig":null,"attributes":[{"value":"/ Maximum of allowed bytes in a `Digest`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106557,"byte_end":106599,"line_start":19,"line_end":19,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106719,"byte_end":106726,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"KEY_MIN","qualname":"::crypto::generichash::KEY_MIN","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Minimium of allowed bytes in a key\n","sig":null,"attributes":[{"value":"/ Minimium of allowed bytes in a key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106670,"byte_end":106708,"line_start":22,"line_end":22,"column_start":1,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106827,"byte_end":106834,"line_start":26,"line_end":26,"column_start":11,"column_end":18},"name":"KEY_MAX","qualname":"::crypto::generichash::KEY_MAX","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum of allowed bytes in a key\n","sig":null,"attributes":[{"value":"/ Maximum of allowed bytes in a key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106779,"byte_end":106816,"line_start":25,"line_end":25,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107057,"byte_end":107062,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"State","qualname":"::crypto::generichash::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206}],"decl_id":null,"docs":" `State` contains the state for multi-part (streaming) hash computations. This allows the caller\n to process a message as a sequence of multiple chunks.\n","sig":null,"attributes":[{"value":"/ `State` contains the state for multi-part (streaming) hash computations. This allows the caller","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106887,"byte_end":106986,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/ to process a message as a sequence of multiple chunks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":106987,"byte_end":107045,"line_start":29,"line_end":29,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107578,"byte_end":107581,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<State>::new","value":"fn (out_len: usize, key: Option<&[u8]>) -> Result<State, ()>","parent":null,"children":[],"decl_id":null,"docs":" `new` constructs and initializes a new `State` with the given parameters.","sig":null,"attributes":[{"value":"/ `new` constructs and initializes a new `State` with the given parameters.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107142,"byte_end":107219,"line_start":36,"line_end":36,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107224,"byte_end":107227,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ `out_len` specifies the resulting hash size.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107232,"byte_end":107280,"line_start":38,"line_end":38,"column_start":5,"column_end":53}},{"value":"/ Only values in the interval [`DIGEST_MIN`, `DIGEST_MAX`] are allowed.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107285,"byte_end":107358,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107363,"byte_end":107366,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ `key` is an optional parameter, which when given,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107371,"byte_end":107424,"line_start":41,"line_end":41,"column_start":5,"column_end":58}},{"value":"/ a custom key can be used for the computation of the hash.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107429,"byte_end":107490,"line_start":42,"line_end":42,"column_start":5,"column_end":66}},{"value":"/ The size of the key must be in the interval [`KEY_MIN`, `KEY_MAX`].","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107495,"byte_end":107566,"line_start":43,"line_end":43,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":108658,"byte_end":108664,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"update","qualname":"<State>::update","value":"fn (&mut self, data: &[u8]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `update` updates the `State` with `data`. `update` can be called multiple times in order\n to compute the hash from sequential chunks of the message.\n","sig":null,"attributes":[{"value":"/ `update` updates the `State` with `data`. `update` can be called multiple times in order","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":108487,"byte_end":108579,"line_start":75,"line_end":75,"column_start":5,"column_end":97}},{"value":"/ to compute the hash from sequential chunks of the message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":108584,"byte_end":108646,"line_start":76,"line_end":76,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":109099,"byte_end":109107,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"finalize","qualname":"<State>::finalize","value":"fn (mut self) -> Result<Digest, ()>","parent":null,"children":[],"decl_id":null,"docs":" `finalize` finalizes the state and returns the digest value. `finalize` consumes the\n `State` so that it cannot be accidentally reused.\n","sig":null,"attributes":[{"value":"/ `finalize` finalizes the state and returns the digest value. `finalize` consumes the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":108941,"byte_end":109029,"line_start":88,"line_end":88,"column_start":5,"column_end":93}},{"value":"/ `State` so that it cannot be accidentally reused.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":109034,"byte_end":109087,"line_start":89,"line_end":89,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash","qualname":"::crypto::hash","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":224}],"decl_id":null,"docs":" Hashing","sig":null,"attributes":[{"value":"! Hashing","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":116917,"byte_end":116928,"line_start":1,"line_end":1,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":116929,"byte_end":116932,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":116933,"byte_end":116953,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The `hash()` function is designed to be usable as a strong","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":116954,"byte_end":117016,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"! component of DSA, RSA-PSS, key derivation, hash-based","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117017,"byte_end":117074,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"! message-authentication codes, hash-based ciphers, and various other","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117075,"byte_end":117146,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! common applications.  \"Strong\" means that the security of these","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117147,"byte_end":117214,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"! applications, when instantiated with `hash()`, is the same","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117215,"byte_end":117277,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"! as the security of the applications against generic attacks. In","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117278,"byte_end":117345,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! particular, the `hash()` function is designed to make","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117346,"byte_end":117403,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"! finding collisions difficult.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117404,"byte_end":117437,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117438,"byte_end":117441,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117442,"byte_end":117466,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"! `hash()` is currently an implementation of `SHA-512`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117467,"byte_end":117524,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117525,"byte_end":117528,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! There has been considerable degradation of public confidence in the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117529,"byte_end":117600,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"! security conjectures for many hash functions, including `SHA-512`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117601,"byte_end":117671,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"! However, for the moment, there do not appear to be alternatives that","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117672,"byte_end":117744,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"! inspire satisfactory levels of confidence. One can hope that NIST's","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117745,"byte_end":117816,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! SHA-3 competition will improve the situation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117817,"byte_end":117866,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117867,"byte_end":117870,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! # Alternate primitives","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117871,"byte_end":117897,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! `NaCl` supports the following hash functions:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117898,"byte_end":117947,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117948,"byte_end":117951,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! -----------------------------------------","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117952,"byte_end":117997,"line_start":25,"line_end":25,"column_start":1,"column_end":46}},{"value":"! |`crypto_hash`        |primitive |BYTES |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":117998,"byte_end":118043,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"! |---------------------|----------|------|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118044,"byte_end":118089,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"! |`crypto_hash_sha256` |`SHA-256` |32    |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118090,"byte_end":118135,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"! |`crypto_hash_sha512` |`SHA-512` |64    |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118136,"byte_end":118181,"line_start":29,"line_end":29,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118182,"byte_end":118185,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118186,"byte_end":118199,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118200,"byte_end":118207,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::hash;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118208,"byte_end":118242,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118243,"byte_end":118246,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! let data_to_hash = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118247,"byte_end":118283,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"! let digest = hash::hash(data_to_hash);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118284,"byte_end":118326,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118327,"byte_end":118330,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! let mut hash_state = hash::State::new();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118331,"byte_end":118375,"line_start":38,"line_end":38,"column_start":1,"column_end":45}},{"value":"! hash_state.update(b\"some \");","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118376,"byte_end":118408,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"! hash_state.update(b\"data!\");","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118409,"byte_end":118441,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"! let digest = hash_state.finalize();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118442,"byte_end":118481,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118482,"byte_end":118489,"line_start":42,"line_end":42,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha256","qualname":"::crypto::hash::sha256","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1778},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1821},{"krate":0,"index":1827},{"krate":0,"index":1829},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1766},{"krate":0,"index":1834},{"krate":0,"index":1839},{"krate":0,"index":1837},{"krate":0,"index":1768},{"krate":0,"index":1773}],"decl_id":null,"docs":" `SHA-256`.","sig":null,"attributes":[{"value":"! `SHA-256`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122059,"byte_end":122073,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122074,"byte_end":122077,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! There has been considerable degradation of public confidence in the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122078,"byte_end":122149,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! security conjectures for many hash functions, including `SHA-256`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122150,"byte_end":122220,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! However, for the moment, there do not appear to be alternatives that","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122221,"byte_end":122293,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"! inspire satisfactory levels of confidence. One can hope that NIST's","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122294,"byte_end":122365,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! SHA-3 competition will improve the situation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha256.rs","byte_start":122366,"byte_end":122415,"line_start":7,"line_end":7,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha512","qualname":"::crypto::hash::sha512","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1856},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1844},{"krate":0,"index":1912},{"krate":0,"index":1917},{"krate":0,"index":1915},{"krate":0,"index":1846},{"krate":0,"index":1851}],"decl_id":null,"docs":" `SHA-512`.","sig":null,"attributes":[{"value":"! `SHA-512`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126714,"byte_end":126728,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126729,"byte_end":126732,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! There has been considerable degradation of public confidence in the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126733,"byte_end":126804,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! security conjectures for many hash functions, including `SHA-512`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126805,"byte_end":126875,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! However, for the moment, there do not appear to be alternatives that","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126876,"byte_end":126948,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"! inspire satisfactory levels of confidence. One can hope that NIST's","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":126949,"byte_end":127020,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! SHA-3 competition will improve the situation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\sha512.rs","byte_start":127021,"byte_end":127070,"line_start":7,"line_end":7,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"kx","qualname":"::crypto::kx","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" Key exchange","sig":null,"attributes":[{"value":"! Key exchange","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130487,"byte_end":130503,"line_start":1,"line_end":1,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130504,"byte_end":130507,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Using the key exchange API, two parties can securely compute a set of shared keys using their","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130508,"byte_end":130605,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! peer's public key and their own secret key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130606,"byte_end":130653,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130654,"byte_end":130657,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This API was introduced in libsodium 1.0.12.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130658,"byte_end":130706,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130707,"byte_end":130710,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130711,"byte_end":130724,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130725,"byte_end":130728,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130729,"byte_end":130736,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::kx;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130737,"byte_end":130769,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130770,"byte_end":130773,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! // client-side","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130774,"byte_end":130792,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"! let (client_pk, client_sk) = kx::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130793,"byte_end":130844,"line_start":14,"line_end":14,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130845,"byte_end":130848,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! // server-side","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130849,"byte_end":130867,"line_start":16,"line_end":16,"column_start":1,"column_end":19}},{"value":"! let (server_pk, server_sk) = kx::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130868,"byte_end":130919,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130920,"byte_end":130923,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! // client and server exchanges client_pk and server_pk","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130924,"byte_end":130982,"line_start":19,"line_end":19,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130983,"byte_end":130986,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! // client deduces the two session keys rx1 and tx1","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":130987,"byte_end":131041,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"! let (rx1, tx1) = match kx::client_session_keys(&client_pk, &client_sk, &server_pk) {","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131042,"byte_end":131130,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"!     Ok((rx, tx)) => (rx, tx),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131131,"byte_end":131164,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"!     Err(()) => panic!(\"bad server signature\"),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131165,"byte_end":131215,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"! };","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131216,"byte_end":131222,"line_start":25,"line_end":25,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131223,"byte_end":131226,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! // server performs the same operation","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131227,"byte_end":131268,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"! let (rx2, tx2) = match kx::server_session_keys(&server_pk, &server_sk, &client_pk) {","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131269,"byte_end":131357,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"!     Ok((rx, tx)) => (rx, tx),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131358,"byte_end":131391,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"!     Err(()) => panic!(\"bad client signature\"),","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131392,"byte_end":131442,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"! };","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131443,"byte_end":131449,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131450,"byte_end":131453,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! assert!(rx1==tx2);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131454,"byte_end":131476,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"! assert!(rx2==tx1);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131477,"byte_end":131499,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131500,"byte_end":131503,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131504,"byte_end":131511,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"x25519blake2b","qualname":"::crypto::kx::x25519blake2b","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":1921},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1935},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1977},{"krate":0,"index":1987},{"krate":0,"index":1989},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":2016},{"krate":0,"index":2019},{"krate":0,"index":2022},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":2027},{"krate":0,"index":2037},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2072},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2077},{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2096},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2085},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249}],"decl_id":null,"docs":" `x25519blake2b` is the current default key exchange scheme of `libsodium`.\n","sig":null,"attributes":[{"value":"! `x25519blake2b` is the current default key exchange scheme of `libsodium`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131569,"byte_end":131647,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131707,"byte_end":131721,"line_start":6,"line_end":6,"column_start":11,"column_end":25},"name":"PUBLICKEYBYTES","qualname":"::crypto::kx::x25519blake2b::PUBLICKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `PublicKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `PublicKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131659,"byte_end":131696,"line_start":5,"line_end":5,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131820,"byte_end":131834,"line_start":9,"line_end":9,"column_start":11,"column_end":25},"name":"SECRETKEYBYTES","qualname":"::crypto::kx::x25519blake2b::SECRETKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `SecretKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131772,"byte_end":131809,"line_start":8,"line_end":8,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131928,"byte_end":131937,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"SEEDBYTES","qualname":"::crypto::kx::x25519blake2b::SEEDBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Seed`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Seed`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131885,"byte_end":131917,"line_start":11,"line_end":11,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132032,"byte_end":132047,"line_start":15,"line_end":15,"column_start":11,"column_end":26},"name":"SESSIONKEYBYTES","qualname":"::crypto::kx::x25519blake2b::SESSIONKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `SessionKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `SessionKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":131983,"byte_end":132021,"line_start":14,"line_end":14,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132161,"byte_end":132170,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::crypto::kx::x25519blake2b::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `PublicKey` for key exchanges.\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132338,"byte_end":132347,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::crypto::kx::x25519blake2b::SecretKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `SecretKey` for key exchanges.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2027},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132640,"byte_end":132644,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Seed","qualname":"::crypto::kx::x25519blake2b::Seed","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Seed` that can be used for keypair generation","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132834,"byte_end":132844,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"SessionKey","qualname":"::crypto::kx::x25519blake2b::SessionKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `SessionKey` is returned by `client_session_keys` and `server_session_keys` and is the\n exchanged secret between the client and server.\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133130,"byte_end":133141,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"gen_keypair","qualname":"::crypto::kx::x25519blake2b::gen_keypair","value":"fn () -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `gen_keypair()` randomly generates a secret key and a corresponding public\n key.","sig":null,"attributes":[{"value":"/ `gen_keypair()` randomly generates a secret key and a corresponding public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132866,"byte_end":132944,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132945,"byte_end":132953,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132954,"byte_end":132957,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_keypair()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":132958,"byte_end":133030,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133031,"byte_end":133100,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133101,"byte_end":133122,"line_start":50,"line_end":50,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133496,"byte_end":133513,"line_start":62,"line_end":62,"column_start":8,"column_end":25},"name":"keypair_from_seed","qualname":"::crypto::kx::x25519blake2b::keypair_from_seed","value":"fn (seed: &Seed) -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `keypair_from_seed()` computes a secret key and a corresponding public key\n from a `Seed`.\n","sig":null,"attributes":[{"value":"/ `keypair_from_seed()` computes a secret key and a corresponding public key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133391,"byte_end":133469,"line_start":60,"line_end":60,"column_start":1,"column_end":79}},{"value":"/ from a `Seed`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133470,"byte_end":133488,"line_start":61,"line_end":61,"column_start":1,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":134154,"byte_end":134173,"line_start":75,"line_end":75,"column_start":8,"column_end":27},"name":"server_session_keys","qualname":"::crypto::kx::x25519blake2b::server_session_keys","value":"fn (server_pk: &PublicKey, server_sk: &SecretKey, client_pk: &PublicKey) -> Result<(SessionKey, SessionKey), ()>","parent":null,"children":[],"decl_id":null,"docs":" `server_session_keys()` computes a pair of shared keys (rx and tx) using the server's public\n key `server_pk`, the server's secret key `server_sk` and the client's public key `client_pk`.\n If the client's public key is acceptable, it returns the two shared keys, the first for `rx`\n and the second for `tx`. Otherwise, it returns `None`.\n","sig":null,"attributes":[{"value":"/ `server_session_keys()` computes a pair of shared keys (rx and tx) using the server's public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133796,"byte_end":133892,"line_start":71,"line_end":71,"column_start":1,"column_end":97}},{"value":"/ key `server_pk`, the server's secret key `server_sk` and the client's public key `client_pk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133893,"byte_end":133990,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ If the client's public key is acceptable, it returns the two shared keys, the first for `rx`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":133991,"byte_end":134087,"line_start":73,"line_end":73,"column_start":1,"column_end":97}},{"value":"/ and the second for `tx`. Otherwise, it returns `None`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":134088,"byte_end":134146,"line_start":74,"line_end":74,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":135113,"byte_end":135132,"line_start":102,"line_end":102,"column_start":8,"column_end":27},"name":"client_session_keys","qualname":"::crypto::kx::x25519blake2b::client_session_keys","value":"fn (client_pk: &PublicKey, client_sk: &SecretKey, server_pk: &PublicKey) -> Result<(SessionKey, SessionKey), ()>","parent":null,"children":[],"decl_id":null,"docs":" `client_session_keys()` computes a pair of shared keys (rx and tx) using the client's public\n key `client_pk`, the client's secret key `client_sk` and the server's public key `server_pk`.\n If the server's public key is acceptable, it returns the two shared keys, the first for `rx`\n and the second for `tx`. Otherwise, it returns `None`.\n","sig":null,"attributes":[{"value":"/ `client_session_keys()` computes a pair of shared keys (rx and tx) using the client's public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":134755,"byte_end":134851,"line_start":98,"line_end":98,"column_start":1,"column_end":97}},{"value":"/ key `client_pk`, the client's secret key `client_sk` and the server's public key `server_pk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":134852,"byte_end":134949,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ If the server's public key is acceptable, it returns the two shared keys, the first for `rx`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":134950,"byte_end":135046,"line_start":100,"line_end":100,"column_start":1,"column_end":97}},{"value":"/ and the second for `tx`. Otherwise, it returns `None`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\x25519blake2b.rs","byte_start":135047,"byte_end":135105,"line_start":101,"line_end":101,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"onetimeauth","qualname":"::crypto::onetimeauth","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":256}],"decl_id":null,"docs":" Secret-key One-time authentication","sig":null,"attributes":[{"value":"! Secret-key One-time authentication","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140716,"byte_end":140754,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140755,"byte_end":140758,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140759,"byte_end":140779,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The `authenticate()` function, viewed as a function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140780,"byte_end":140835,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"! of the message for a uniform random key, is designed to meet the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140836,"byte_end":140904,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"! standard notion of unforgeability after a single message. After the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140905,"byte_end":140976,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! sender authenticates one message, an attacker cannot find authenticators","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":140977,"byte_end":141053,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"! for any other messages.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141054,"byte_end":141081,"line_start":8,"line_end":8,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141082,"byte_end":141085,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The sender must not use `authenticate()` to authenticate more than one message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141086,"byte_end":141168,"line_start":10,"line_end":10,"column_start":1,"column_end":83}},{"value":"! under the same key. Authenticators for two messages under the same key should","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141169,"byte_end":141250,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"! be expected to reveal enough information to allow forgeries of authenticators","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141251,"byte_end":141332,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"! on other messages.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141333,"byte_end":141355,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141356,"byte_end":141359,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141360,"byte_end":141384,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"! `authenticate()` is `crypto_onetimeauth_poly1305`, an authenticator specified","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141385,"byte_end":141466,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"! in [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 9. This","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141467,"byte_end":141548,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"! authenticator is proven to meet the standard notion of unforgeability after a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141549,"byte_end":141630,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"! single message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141631,"byte_end":141650,"line_start":19,"line_end":19,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141651,"byte_end":141654,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141655,"byte_end":141668,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141669,"byte_end":141676,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::onetimeauth;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141677,"byte_end":141718,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141719,"byte_end":141722,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! let key = onetimeauth::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141723,"byte_end":141760,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"! let data_to_authenticate = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141761,"byte_end":141805,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"! let tag = onetimeauth::authenticate(data_to_authenticate, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141806,"byte_end":141874,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"! assert!(onetimeauth::verify(&tag, data_to_authenticate, &key));","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141875,"byte_end":141942,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":141943,"byte_end":141950,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"poly1305","qualname":"::crypto::onetimeauth::poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2136},{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2144},{"krate":0,"index":2189},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2232},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2131},{"krate":0,"index":2133},{"krate":0,"index":2135}],"decl_id":null,"docs":" `crypto_onetimeauth_poly1305`, an authenticator specified\n in [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 9. This\n authenticator is proven to meet the standard notion of unforgeability after a\n single message.\n","sig":null,"attributes":[{"value":"! `crypto_onetimeauth_poly1305`, an authenticator specified","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","byte_start":146272,"byte_end":146333,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"! in [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 9. This","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","byte_start":146334,"byte_end":146415,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"! authenticator is proven to meet the standard notion of unforgeability after a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","byte_start":146416,"byte_end":146497,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"! single message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\poly1305.rs","byte_start":146498,"byte_end":146517,"line_start":4,"line_end":4,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pwhash","qualname":"::crypto::pwhash","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":281},{"krate":0,"index":296}],"decl_id":null,"docs":" Password Hashing","sig":null,"attributes":[{"value":"! Password Hashing","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148577,"byte_end":148597,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148598,"byte_end":148601,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Secret keys used to encrypt or sign confidential data have to be chosen from","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148602,"byte_end":148682,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"! a very large keyspace. However, passwords are usually short, human-generated","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148683,"byte_end":148763,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! strings, making dictionary attacks practical.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148764,"byte_end":148813,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148814,"byte_end":148817,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The pwhash operation derives a secret key of any size from a password and a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148818,"byte_end":148897,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! salt.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148898,"byte_end":148907,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148908,"byte_end":148911,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! - The generated key has the size defined by the application, no matter what","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148912,"byte_end":148991,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"!   the password length is.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":148992,"byte_end":149021,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"! - The same password hashed with same parameters will","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149022,"byte_end":149078,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"!   always produce the same key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149079,"byte_end":149113,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"! - The same password hashed with different salts","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149114,"byte_end":149165,"line_start":14,"line_end":14,"column_start":1,"column_end":52}},{"value":"!   will produce different keys.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149166,"byte_end":149200,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"! - The function deriving a key from a password","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149201,"byte_end":149250,"line_start":16,"line_end":16,"column_start":1,"column_end":50}},{"value":"!   and a salt is CPU intensive and intentionally requires a fair amount of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149251,"byte_end":149328,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"!   memory. Therefore, it mitigates brute-force attacks by requiring a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149329,"byte_end":149401,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"!   significant effort to verify each password.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149402,"byte_end":149451,"line_start":19,"line_end":19,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149452,"byte_end":149455,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! Common use cases:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149456,"byte_end":149477,"line_start":21,"line_end":21,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149478,"byte_end":149481,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! - Protecting an on-disk secret key with a password,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149482,"byte_end":149537,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"! - Password storage, or rather: storing what it takes to verify a password","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149538,"byte_end":149615,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"!   without having to store the actual password.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149616,"byte_end":149666,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149667,"byte_end":149670,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example (key derivation)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149671,"byte_end":149701,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149702,"byte_end":149709,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::secretbox;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149710,"byte_end":149749,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"! use sodiumoxide::crypto::pwhash;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149750,"byte_end":149786,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149787,"byte_end":149790,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! let passwd = b\"Correct Horse Battery Staple\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149791,"byte_end":149840,"line_start":32,"line_end":32,"column_start":1,"column_end":50}},{"value":"! let salt = pwhash::gen_salt();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149841,"byte_end":149875,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"! let mut k = secretbox::Key([0; secretbox::KEYBYTES]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149876,"byte_end":149933,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"! {","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149934,"byte_end":149939,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"!     let secretbox::Key(ref mut kb) = k;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149940,"byte_end":149983,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"!     pwhash::derive_key(kb, passwd, &salt,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":149984,"byte_end":150029,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"!                        pwhash::OPSLIMIT_INTERACTIVE,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150030,"byte_end":150086,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"!                        pwhash::MEMLIMIT_INTERACTIVE).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150087,"byte_end":150153,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"! }","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150154,"byte_end":150159,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150160,"byte_end":150167,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150168,"byte_end":150171,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! # Example (password hashing)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150172,"byte_end":150204,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150205,"byte_end":150212,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::pwhash;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150213,"byte_end":150249,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! let passwd = b\"Correct Horse Battery Staple\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150250,"byte_end":150299,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"! let pwh = pwhash::pwhash(passwd,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150300,"byte_end":150336,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"!                          pwhash::OPSLIMIT_INTERACTIVE,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150337,"byte_end":150395,"line_start":48,"line_end":48,"column_start":1,"column_end":59}},{"value":"!                          pwhash::MEMLIMIT_INTERACTIVE).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150396,"byte_end":150464,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"! let pwh_bytes = pwh.as_ref();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150465,"byte_end":150498,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"! //store pwh_bytes somewhere","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150499,"byte_end":150530,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150531,"byte_end":150538,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150539,"byte_end":150542,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! # Example (password verification)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150543,"byte_end":150580,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150581,"byte_end":150588,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::pwhash;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150589,"byte_end":150625,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150626,"byte_end":150629,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! let passwd = b\"Correct Horse Battery Staple\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150630,"byte_end":150679,"line_start":58,"line_end":58,"column_start":1,"column_end":50}},{"value":"! // in reality we want to load the password hash from somewhere","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150680,"byte_end":150746,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"! // and we might want to create a `HashedPassword` from it using","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150747,"byte_end":150814,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"! // `HashedPassword::from_slice(pwhash_bytes).unwrap()`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150815,"byte_end":150873,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"! let pwh = pwhash::pwhash(passwd,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150874,"byte_end":150910,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"!                          pwhash::OPSLIMIT_INTERACTIVE,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150911,"byte_end":150969,"line_start":63,"line_end":63,"column_start":1,"column_end":59}},{"value":"!                          pwhash::MEMLIMIT_INTERACTIVE).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":150970,"byte_end":151038,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"! assert!(pwhash::pwhash_verify(&pwh, passwd));","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151039,"byte_end":151088,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151089,"byte_end":151096,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"argon2i13","qualname":"::crypto::pwhash::argon2i13","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2266},{"krate":0,"index":2273},{"krate":0,"index":2271},{"krate":0,"index":2269},{"krate":0,"index":2274},{"krate":0,"index":2281},{"krate":0,"index":2279},{"krate":0,"index":2277},{"krate":0,"index":2285},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2299},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2319},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2328},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2344},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2373},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2387},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2265}],"decl_id":null,"docs":" Argon2 summarizes the state of the art in the design of memory-hard functions.","sig":null,"attributes":[{"value":"! Argon2 summarizes the state of the art in the design of memory-hard functions.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":157956,"byte_end":158038,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158039,"byte_end":158042,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! It aims at the highest memory filling rate and effective use of multiple","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158043,"byte_end":158119,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"! computing units, while still providing defense against tradeoff attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158120,"byte_end":158196,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158197,"byte_end":158200,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It prevents ASICs from having a significant advantage over software","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158201,"byte_end":158272,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! implementations.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158273,"byte_end":158293,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158294,"byte_end":158297,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Argon2i uses data-independent memory access, which is preferred for","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158298,"byte_end":158369,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"! password hashing and password-based key derivation. Argon2i is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158370,"byte_end":158436,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"! invulnerable to side-channel timing attacks but weaker against","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158437,"byte_end":158503,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"! Time-memory Tradeoff (TMTO) attacks.  If you are unsure which","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158504,"byte_end":158569,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"! Argon2 variant to use, use Argon2id, not this module.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158570,"byte_end":158627,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158628,"byte_end":158631,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! Note: libsodium provides a limited version of the Argon2 function. The salt","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158632,"byte_end":158711,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"! parameter is fixed at 128 bits and the parallelism parameter is fixed to 1.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2i13.rs","byte_start":158712,"byte_end":158791,"line_start":16,"line_end":16,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"argon2id13","qualname":"::crypto::pwhash::argon2id13","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":2400},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2421},{"krate":0,"index":2428},{"krate":0,"index":2426},{"krate":0,"index":2424},{"krate":0,"index":2429},{"krate":0,"index":2436},{"krate":0,"index":2434},{"krate":0,"index":2432},{"krate":0,"index":2440},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2447},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2454},{"krate":0,"index":2469},{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2477},{"krate":0,"index":2480},{"krate":0,"index":2483},{"krate":0,"index":2489},{"krate":0,"index":2491},{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2499},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2542},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":2418},{"krate":0,"index":2420}],"decl_id":null,"docs":" Argon2 summarizes the state of the art in the design of memory-hard functions.","sig":null,"attributes":[{"value":"! Argon2 summarizes the state of the art in the design of memory-hard functions.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188489,"byte_end":188571,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188572,"byte_end":188575,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! It aims at the highest memory filling rate and effective use of multiple","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188576,"byte_end":188652,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"! computing units, while still providing defense against tradeoff attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188653,"byte_end":188729,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188730,"byte_end":188733,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It prevents ASICs from having a significant advantage over software","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188734,"byte_end":188805,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"! implementations.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188806,"byte_end":188826,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188827,"byte_end":188830,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Argon2id provides a hybrid implementation, selecting the best features","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188831,"byte_end":188905,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"! of Argon2i (with resistance to side-channel attackes) and Argon2d (with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188906,"byte_end":188981,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"! resistance to time-memory tradeoff (TMTO) attacks).  If you are unsure","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":188982,"byte_end":189056,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"! of which Argon2 variant to use, use this one.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":189057,"byte_end":189106,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":189107,"byte_end":189110,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! Note: libsodium provides a limited version of the Argon2 function. The salt","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":189111,"byte_end":189190,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"! parameter is fixed at 128 bits and the parallelism parameter is fixed to 1.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\argon2id13.rs","byte_start":189191,"byte_end":189270,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scryptsalsa208sha256","qualname":"::crypto::pwhash::scryptsalsa208sha256","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":2555},{"krate":0,"index":2560},{"krate":0,"index":2558},{"krate":0,"index":2561},{"krate":0,"index":2566},{"krate":0,"index":2564},{"krate":0,"index":2570},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2604},{"krate":0,"index":2607},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2629},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2643},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"decl_id":null,"docs":" `crypto_pwhash_scryptsalsa208sha256`, a particular combination of Scrypt, Salsa20/8\n and SHA-256\n","sig":null,"attributes":[{"value":"! `crypto_pwhash_scryptsalsa208sha256`, a particular combination of Scrypt, Salsa20/8","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221181,"byte_end":221268,"line_start":1,"line_end":1,"column_start":1,"column_end":88}},{"value":"! and SHA-256","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221269,"byte_end":221284,"line_start":2,"line_end":2,"column_start":1,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221397,"byte_end":221406,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"SALTBYTES","qualname":"::crypto::pwhash::scryptsalsa208sha256::SALTBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Salt`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Salt`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221354,"byte_end":221386,"line_start":8,"line_end":8,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221530,"byte_end":221549,"line_start":12,"line_end":12,"column_start":11,"column_end":30},"name":"HASHEDPASSWORDBYTES","qualname":"::crypto::pwhash::scryptsalsa208sha256::HASHEDPASSWORDBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `HashedPassword`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `HashedPassword`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221477,"byte_end":221519,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221679,"byte_end":221688,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"STRPREFIX","qualname":"::crypto::pwhash::scryptsalsa208sha256::STRPREFIX","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" All `HashedPasswords` start with this string.\n","sig":null,"attributes":[{"value":"/ All `HashedPasswords` start with this string.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221619,"byte_end":221668,"line_start":14,"line_end":14,"column_start":1,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221828,"byte_end":221848,"line_start":18,"line_end":18,"column_start":11,"column_end":31},"name":"OPSLIMIT_INTERACTIVE","qualname":"::crypto::pwhash::scryptsalsa208sha256::OPSLIMIT_INTERACTIVE","value":"OpsLimit","parent":null,"children":[],"decl_id":null,"docs":" Safe base line for `OpsLimit` for interactive password hashing.\n","sig":null,"attributes":[{"value":"/ Safe base line for `OpsLimit` for interactive password hashing.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221750,"byte_end":221817,"line_start":17,"line_end":17,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222025,"byte_end":222045,"line_start":22,"line_end":22,"column_start":11,"column_end":31},"name":"MEMLIMIT_INTERACTIVE","qualname":"::crypto::pwhash::scryptsalsa208sha256::MEMLIMIT_INTERACTIVE","value":"MemLimit","parent":null,"children":[],"decl_id":null,"docs":" Safe base line for `MemLimit` for interactive password hashing.\n","sig":null,"attributes":[{"value":"/ Safe base line for `MemLimit` for interactive password hashing.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":221947,"byte_end":222014,"line_start":21,"line_end":21,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222196,"byte_end":222214,"line_start":26,"line_end":26,"column_start":11,"column_end":29},"name":"OPSLIMIT_SENSITIVE","qualname":"::crypto::pwhash::scryptsalsa208sha256::OPSLIMIT_SENSITIVE","value":"OpsLimit","parent":null,"children":[],"decl_id":null,"docs":" `OpsLimit` for highly sensitive data.\n","sig":null,"attributes":[{"value":"/ `OpsLimit` for highly sensitive data.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222144,"byte_end":222185,"line_start":25,"line_end":25,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222363,"byte_end":222381,"line_start":30,"line_end":30,"column_start":11,"column_end":29},"name":"MEMLIMIT_SENSITIVE","qualname":"::crypto::pwhash::scryptsalsa208sha256::MEMLIMIT_SENSITIVE","value":"MemLimit","parent":null,"children":[],"decl_id":null,"docs":" `MemLimit` for highly sensitive data.\n","sig":null,"attributes":[{"value":"/ `MemLimit` for highly sensitive data.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222311,"byte_end":222352,"line_start":29,"line_end":29,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2555},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222707,"byte_end":222715,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"OpsLimit","qualname":"::crypto::pwhash::scryptsalsa208sha256::OpsLimit","value":"","parent":null,"children":[],"decl_id":null,"docs":" `OpsLimit` represents the maximum number of computations to perform when\n using the functions in this module.","sig":null,"attributes":[{"value":"/ `OpsLimit` represents the maximum number of computations to perform when","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222478,"byte_end":222554,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ using the functions in this module.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222555,"byte_end":222594,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222595,"byte_end":222598,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A high `OpsLimit` will make the functions","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222599,"byte_end":222644,"line_start":36,"line_end":36,"column_start":1,"column_end":46}},{"value":"/ require more CPU cycles","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222645,"byte_end":222672,"line_start":37,"line_end":37,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222963,"byte_end":222971,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"MemLimit","qualname":"::crypto::pwhash::scryptsalsa208sha256::MemLimit","value":"","parent":null,"children":[],"decl_id":null,"docs":" `MemLimit` represents the maximum amount of RAM that the functions in this\n module will use, in bytes.","sig":null,"attributes":[{"value":"/ `MemLimit` represents the maximum amount of RAM that the functions in this","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222729,"byte_end":222807,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ module will use, in bytes.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222808,"byte_end":222838,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222839,"byte_end":222842,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It is highly recommended to allow the functions to use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222843,"byte_end":222901,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ at least 16 megabytes.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":222902,"byte_end":222928,"line_start":45,"line_end":45,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2570},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223049,"byte_end":223053,"line_start":51,"line_end":51,"column_start":12,"column_end":16},"name":"Salt","qualname":"::crypto::pwhash::scryptsalsa208sha256::Salt","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Salt` used for password hashing\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2629},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223416,"byte_end":223430,"line_start":60,"line_end":60,"column_start":12,"column_end":26},"name":"HashedPassword","qualname":"::crypto::pwhash::scryptsalsa208sha256::HashedPassword","value":"","parent":null,"children":[],"decl_id":null,"docs":" `HashedPassword`is a password verifier generated from a password","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223694,"byte_end":223702,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"gen_salt","qualname":"::crypto::pwhash::scryptsalsa208sha256::gen_salt","value":"fn () -> Salt","parent":null,"children":[],"decl_id":null,"docs":" `gen_salt()` randombly generates a new `Salt` for key derivation","sig":null,"attributes":[{"value":"/ `gen_salt()` randombly generates a new `Salt` for key derivation","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223456,"byte_end":223524,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223525,"byte_end":223528,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_salt()` is thread-safe provided that you have called","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223529,"byte_end":223605,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ `sodiumoxide::init()` once before using any other function from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223606,"byte_end":223686,"line_start":66,"line_end":66,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225195,"byte_end":225205,"line_start":102,"line_end":102,"column_start":8,"column_end":18},"name":"derive_key","qualname":"::crypto::pwhash::scryptsalsa208sha256::derive_key","value":"fn <'a> (key: &'a mut [u8], passwd: &[u8], salt: &Salt, OpsLimit(opslimit): OpsLimit, MemLimit(memlimit): MemLimit) -> Result<&'a [u8], ()>","parent":null,"children":[],"decl_id":null,"docs":" The `derive_key()` function derives a key from a password and a `Salt`","sig":null,"attributes":[{"value":"/ The `derive_key()` function derives a key from a password and a `Salt`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223803,"byte_end":223877,"line_start":73,"line_end":73,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223878,"byte_end":223881,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The computed key is stored into key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223882,"byte_end":223922,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223923,"byte_end":223926,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ `opslimit` represents a maximum amount of computations to perform. Raising","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":223927,"byte_end":224005,"line_start":77,"line_end":77,"column_start":1,"column_end":79}},{"value":"/ this number will make the function require more CPU cycles to compute a key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224006,"byte_end":224086,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224087,"byte_end":224090,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ `memlimit` is the maximum amount of RAM that the function will use, in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224091,"byte_end":224165,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/ bytes. It is highly recommended to allow the function to use at least 16","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224166,"byte_end":224242,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ megabytes.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224243,"byte_end":224257,"line_start":82,"line_end":82,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224258,"byte_end":224261,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ For interactive, online operations, `OPSLIMIT_INTERACTIVE` and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224262,"byte_end":224328,"line_start":84,"line_end":84,"column_start":1,"column_end":67}},{"value":"/ `MEMLIMIT_INTERACTIVE` provide a safe base line for these two","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224329,"byte_end":224394,"line_start":85,"line_end":85,"column_start":1,"column_end":66}},{"value":"/ parameters. However, using higher values may improve security.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224395,"byte_end":224461,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224462,"byte_end":224465,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ For highly sensitive data, `OPSLIMIT_SENSITIVE` and `MEMLIMIT_SENSITIVE` can","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224466,"byte_end":224546,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ be used as an alternative. But with these parameters, deriving a key takes","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224547,"byte_end":224625,"line_start":89,"line_end":89,"column_start":1,"column_end":79}},{"value":"/ more than 10 seconds on a 2.8 Ghz Core i7 CPU and requires up to 1 gigabyte","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224626,"byte_end":224705,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/ of dedicated RAM.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224706,"byte_end":224727,"line_start":91,"line_end":91,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224728,"byte_end":224731,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The salt should be unpredictable. `gen_salt()` is the easiest way to create a `Salt`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224732,"byte_end":224821,"line_start":93,"line_end":93,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224822,"byte_end":224825,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Keep in mind that in order to produce the same key from the same password,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224826,"byte_end":224904,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ the same salt, and the same values for opslimit and memlimit have to be","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224905,"byte_end":224980,"line_start":96,"line_end":96,"column_start":1,"column_end":76}},{"value":"/ used.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224981,"byte_end":224990,"line_start":97,"line_end":97,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224991,"byte_end":224994,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The function returns `Ok(key)` on success and `Err(())` if the computation didn't","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":224995,"byte_end":225080,"line_start":99,"line_end":99,"column_start":1,"column_end":86}},{"value":"/ complete, usually because the operating system refused to allocate the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225081,"byte_end":225155,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/ amount of requested memory.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225156,"byte_end":225187,"line_start":101,"line_end":101,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225945,"byte_end":225967,"line_start":130,"line_end":130,"column_start":8,"column_end":30},"name":"derive_key_interactive","qualname":"::crypto::pwhash::scryptsalsa208sha256::derive_key_interactive","value":"fn <'a> (key: &'a mut [u8], passwd: &[u8], salt: &Salt) -> Result<&'a [u8], ()>","parent":null,"children":[],"decl_id":null,"docs":" `derive_key_interactive()` is a shortcut function for `derive_key()` with\n interactive limits (i.e. using `derive_key()` with `OPSLIMIT_INTERACTIVE`\n and `MEMLIMIT_INTERACTIVE`)\n","sig":null,"attributes":[{"value":"/ `derive_key_interactive()` is a shortcut function for `derive_key()` with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225750,"byte_end":225827,"line_start":127,"line_end":127,"column_start":1,"column_end":78}},{"value":"/ interactive limits (i.e. using `derive_key()` with `OPSLIMIT_INTERACTIVE`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225828,"byte_end":225905,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ and `MEMLIMIT_INTERACTIVE`)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":225906,"byte_end":225937,"line_start":129,"line_end":129,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226375,"byte_end":226395,"line_start":147,"line_end":147,"column_start":8,"column_end":28},"name":"derive_key_sensitive","qualname":"::crypto::pwhash::scryptsalsa208sha256::derive_key_sensitive","value":"fn <'a> (key: &'a mut [u8], passwd: &[u8], salt: &Salt) -> Result<&'a [u8], ()>","parent":null,"children":[],"decl_id":null,"docs":" `derive_key_sensitive()` is a shortcut function for `derive_key()` with\n sensitive limits (i.e. using `derive_key()` with `OPSLIMIT_SENSITIVE`\n and `MEMLIMIT_SENSITIVE`)\n","sig":null,"attributes":[{"value":"/ `derive_key_sensitive()` is a shortcut function for `derive_key()` with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226188,"byte_end":226263,"line_start":144,"line_end":144,"column_start":1,"column_end":76}},{"value":"/ sensitive limits (i.e. using `derive_key()` with `OPSLIMIT_SENSITIVE`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226264,"byte_end":226337,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ and `MEMLIMIT_SENSITIVE`)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226338,"byte_end":226367,"line_start":146,"line_end":146,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227145,"byte_end":227151,"line_start":169,"line_end":169,"column_start":8,"column_end":14},"name":"pwhash","qualname":"::crypto::pwhash::scryptsalsa208sha256::pwhash","value":"fn (passwd: &[u8], OpsLimit(opslimit): OpsLimit, MemLimit(memlimit): MemLimit) -> Result<HashedPassword, ()>","parent":null,"children":[],"decl_id":null,"docs":" The `pwhash()` returns a `HashedPassword` which\n includes:","sig":null,"attributes":[{"value":"/ The `pwhash()` returns a `HashedPassword` which","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226565,"byte_end":226616,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ includes:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226617,"byte_end":226630,"line_start":156,"line_end":156,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226631,"byte_end":226634,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ - the result of a memory-hard, CPU-intensive hash function applied to the password","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226635,"byte_end":226721,"line_start":158,"line_end":158,"column_start":1,"column_end":87}},{"value":"/   `passwd`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226722,"byte_end":226736,"line_start":159,"line_end":159,"column_start":1,"column_end":15}},{"value":"/ - the automatically generated salt used for the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226737,"byte_end":226788,"line_start":160,"line_end":160,"column_start":1,"column_end":52}},{"value":"/   previous computation","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226789,"byte_end":226815,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"/ - the other parameters required to verify the password: opslimit and memlimit","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226816,"byte_end":226897,"line_start":162,"line_end":162,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226898,"byte_end":226901,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ `OPSLIMIT_INTERACTIVE` and `MEMLIMIT_INTERACTIVE` are safe baseline","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226902,"byte_end":226973,"line_start":164,"line_end":164,"column_start":1,"column_end":72}},{"value":"/ values to use for `opslimit` and `memlimit`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":226974,"byte_end":227022,"line_start":165,"line_end":165,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227023,"byte_end":227026,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ The function returns `Ok(hashed_password)` on success and `Err(())` if it didn't complete","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227027,"byte_end":227120,"line_start":167,"line_end":167,"column_start":1,"column_end":94}},{"value":"/ successfully","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227121,"byte_end":227137,"line_start":168,"line_end":168,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227847,"byte_end":227865,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"pwhash_interactive","qualname":"::crypto::pwhash::scryptsalsa208sha256::pwhash_interactive","value":"fn (passwd: &[u8]) -> Result<HashedPassword, ()>","parent":null,"children":[],"decl_id":null,"docs":" `pwhash_interactive()` is a shortcut function for `pwhash()` with\n interactive limits (i.e. using `pwhash()` with `OPSLIMIT_INTERACTIVE`\n and `MEMLIMIT_INTERACTIVE`)\n","sig":null,"attributes":[{"value":"/ `pwhash_interactive()` is a shortcut function for `pwhash()` with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227664,"byte_end":227733,"line_start":191,"line_end":191,"column_start":1,"column_end":70}},{"value":"/ interactive limits (i.e. using `pwhash()` with `OPSLIMIT_INTERACTIVE`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227734,"byte_end":227807,"line_start":192,"line_end":192,"column_start":1,"column_end":74}},{"value":"/ and `MEMLIMIT_INTERACTIVE`)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227808,"byte_end":227839,"line_start":193,"line_end":193,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228154,"byte_end":228170,"line_start":201,"line_end":201,"column_start":8,"column_end":24},"name":"pwhash_sensitive","qualname":"::crypto::pwhash::scryptsalsa208sha256::pwhash_sensitive","value":"fn (passwd: &[u8]) -> Result<HashedPassword, ()>","parent":null,"children":[],"decl_id":null,"docs":" `pwhash_sensitive()` is a shortcut function for `pwhash()` with\n sensitive limits (i.e. using `pwhash()` with `OPSLIMIT_SENSITIVE`\n and `MEMLIMIT_SENSITIVE`)\n","sig":null,"attributes":[{"value":"/ `pwhash_sensitive()` is a shortcut function for `pwhash()` with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":227979,"byte_end":228046,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ sensitive limits (i.e. using `pwhash()` with `OPSLIMIT_SENSITIVE`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228047,"byte_end":228116,"line_start":199,"line_end":199,"column_start":1,"column_end":70}},{"value":"/ and `MEMLIMIT_SENSITIVE`)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228117,"byte_end":228146,"line_start":200,"line_end":200,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228507,"byte_end":228520,"line_start":209,"line_end":209,"column_start":8,"column_end":21},"name":"pwhash_verify","qualname":"::crypto::pwhash::scryptsalsa208sha256::pwhash_verify","value":"fn (hp: &HashedPassword, passwd: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `pwhash_verify()` verifies that the password `str_` is a valid password\n verification string (as generated by `pwhash()`) for `passwd`","sig":null,"attributes":[{"value":"/ `pwhash_verify()` verifies that the password `str_` is a valid password","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228280,"byte_end":228355,"line_start":205,"line_end":205,"column_start":1,"column_end":76}},{"value":"/ verification string (as generated by `pwhash()`) for `passwd`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228356,"byte_end":228421,"line_start":206,"line_end":206,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228422,"byte_end":228425,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ It returns `true` if the verification succeeds, and `false` on error.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\scryptsalsa208sha256.rs","byte_start":228426,"byte_end":228499,"line_start":208,"line_end":208,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalarmult","qualname":"::crypto::scalarmult","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322}],"decl_id":null,"docs":" Scalar multiplication","sig":null,"attributes":[{"value":"! Scalar multiplication","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":230817,"byte_end":230842,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":230843,"byte_end":230846,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Representation of group elements","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":230847,"byte_end":230885,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"! The correspondence between strings and group elements depends on the primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":230886,"byte_end":230968,"line_start":4,"line_end":4,"column_start":1,"column_end":83}},{"value":"! implemented by `scalarmult()`. The correspondence is not necessarily","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":230969,"byte_end":231041,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"! injective in either direction, but it is compatible with scalar multiplication","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231042,"byte_end":231124,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"! in the group. The correspondence does not necessarily include all group","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231125,"byte_end":231200,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"! elements, but it does include all strings; i.e., every string represents at","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231201,"byte_end":231280,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! least one group element.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231281,"byte_end":231309,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231310,"byte_end":231313,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! # Representation of integers","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231314,"byte_end":231346,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"! The correspondence between strings and integers also depends on the primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231347,"byte_end":231428,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"! implemented by `scalarmult()`. Every string represents at least one integer.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231429,"byte_end":231509,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231510,"byte_end":231513,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231514,"byte_end":231534,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"! `scalarmult` is designed to be strong as a component of various well-known","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231535,"byte_end":231613,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"! \"hashed Diffie–Hellman\" applications. In particular, it is designed to make the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231614,"byte_end":231699,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"! \"computational Diffie–Hellman\" problem (CDH) difficult with respect to the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231700,"byte_end":231780,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! standard base.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231781,"byte_end":231799,"line_start":19,"line_end":19,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231800,"byte_end":231803,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! `scalarmult` is also designed to make CDH difficult with respect to other","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231804,"byte_end":231881,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"! nontrivial bases. In particular, if a represented group element has small","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231882,"byte_end":231959,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! order, then it is annihilated by all represented scalars. This feature allows","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":231960,"byte_end":232041,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"! protocols to avoid validating membership in the subgroup generated by the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232042,"byte_end":232119,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"! standard base.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232120,"byte_end":232138,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232139,"byte_end":232142,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! `NaCl` does not make any promises regarding the \"decisional Diffie–Hellman\"","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232143,"byte_end":232224,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"! problem (DDH), the \"static Diffie–Hellman\" problem (SDH), etc. Users are","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232225,"byte_end":232303,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"! responsible for hashing group elements.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232304,"byte_end":232347,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232348,"byte_end":232351,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232352,"byte_end":232376,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"! `scalarmult` is the function `crypto_scalarmult_curve25519` specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232377,"byte_end":232453,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232454,"byte_end":232538,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"! This function is conjectured to be strong. For background see Bernstein,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232539,"byte_end":232615,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"! \"Curve25519: new Diffie-Hellman speed records,\" Lecture Notes in Computer","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232616,"byte_end":232693,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! Science 3958 (2006), 207–228, <http://cr.yp.to/papers.html#curve25519>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232694,"byte_end":232771,"line_start":36,"line_end":36,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve25519","qualname":"::crypto::scalarmult::curve25519","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":2685},{"krate":0,"index":2695},{"krate":0,"index":2697},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2704},{"krate":0,"index":2719},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2730},{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2693},{"krate":0,"index":2735},{"krate":0,"index":2745},{"krate":0,"index":2747},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2754},{"krate":0,"index":2769},{"krate":0,"index":2771},{"krate":0,"index":2774},{"krate":0,"index":2777},{"krate":0,"index":2780},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2743},{"krate":0,"index":326},{"krate":0,"index":328}],"decl_id":null,"docs":" `crypto_scalarmult_curve25519` specified in\n [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.\n This function is conjectured to be strong. For background see Bernstein,\n \"Curve25519: new Diffie-Hellman speed records,\" Lecture Notes in Computer\n Science 3958 (2006), 207–228, <http://cr.yp.to/papers.html#curve25519>.\n","sig":null,"attributes":[{"value":"! `crypto_scalarmult_curve25519` specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":232822,"byte_end":232869,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":232870,"byte_end":232954,"line_start":2,"line_end":2,"column_start":1,"column_end":85}},{"value":"! This function is conjectured to be strong. For background see Bernstein,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":232955,"byte_end":233031,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"! \"Curve25519: new Diffie-Hellman speed records,\" Lecture Notes in Computer","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233032,"byte_end":233109,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! Science 3958 (2006), 207–228, <http://cr.yp.to/papers.html#curve25519>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233110,"byte_end":233187,"line_start":5,"line_end":5,"column_start":1,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233249,"byte_end":233266,"line_start":9,"line_end":9,"column_start":11,"column_end":28},"name":"GROUPELEMENTBYTES","qualname":"::crypto::scalarmult::curve25519::GROUPELEMENTBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `GroupElement`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `GroupElement`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233198,"byte_end":233238,"line_start":8,"line_end":8,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233372,"byte_end":233383,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"SCALARBYTES","qualname":"::crypto::scalarmult::curve25519::SCALARBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Scalar`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Scalar`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233327,"byte_end":233361,"line_start":11,"line_end":11,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233529,"byte_end":233535,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Scalar","qualname":"::crypto::scalarmult::curve25519::Scalar","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Scalar` value (integer in byte representation)\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2735},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233599,"byte_end":233611,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"name":"GroupElement","qualname":"::crypto::scalarmult::curve25519::GroupElement","value":"","parent":null,"children":[],"decl_id":null,"docs":" `GroupElement`\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233921,"byte_end":233931,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"scalarmult","qualname":"::crypto::scalarmult::curve25519::scalarmult","value":"fn (n: &Scalar, p: &GroupElement) -> Result<GroupElement, ()>","parent":null,"children":[],"decl_id":null,"docs":" `scalarmult()` multiplies a group element `p`\n by an integer `n`. It returns the resulting group element `Ok(q)`.\n If the the `GroupElement` is all zero, `scalarmult()` returns `Err(())` since\n the resulting `GroupElement` would be all zero, no matter the `Scalar`.\n","sig":null,"attributes":[{"value":"/ `scalarmult()` multiplies a group element `p`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233635,"byte_end":233684,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/ by an integer `n`. It returns the resulting group element `Ok(q)`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233685,"byte_end":233755,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ If the the `GroupElement` is all zero, `scalarmult()` returns `Err(())` since","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233756,"byte_end":233837,"line_start":26,"line_end":26,"column_start":1,"column_end":82}},{"value":"/ the resulting `GroupElement` would be all zero, no matter the `Scalar`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":233838,"byte_end":233913,"line_start":27,"line_end":27,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":234388,"byte_end":234403,"line_start":42,"line_end":42,"column_start":8,"column_end":23},"name":"scalarmult_base","qualname":"::crypto::scalarmult::curve25519::scalarmult_base","value":"fn (n: &Scalar) -> GroupElement","parent":null,"children":[],"decl_id":null,"docs":" `scalarmult_base()` computes the scalar product of a standard\n group element and an integer `n`. It returns the resulting\n group element `q`/\n","sig":null,"attributes":[{"value":"/ `scalarmult_base()` computes the scalar product of a standard","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":234229,"byte_end":234294,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/ group element and an integer `n`. It returns the resulting","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":234295,"byte_end":234357,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ group element `q`/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\curve25519.rs","byte_start":234358,"byte_end":234380,"line_start":41,"line_end":41,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sealedbox","qualname":"::crypto::sealedbox","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" Sealed Boxes","sig":null,"attributes":[{"value":"! Sealed Boxes","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239229,"byte_end":239245,"line_start":1,"line_end":1,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239246,"byte_end":239249,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Purpose","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239250,"byte_end":239263,"line_start":3,"line_end":3,"column_start":1,"column_end":14}},{"value":"! Sealed boxes are designed to anonymously send messages to a recipient given","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239264,"byte_end":239343,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"! its public key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239344,"byte_end":239363,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239364,"byte_end":239367,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! Only the recipient can decrypt these messages, using its private key. While","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239368,"byte_end":239447,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! the recipient can verify the integrity of the message, it cannot verify the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239448,"byte_end":239527,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! identity of the sender.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239528,"byte_end":239555,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239556,"byte_end":239559,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! A message is encrypted using an ephemeral key pair, whose secret part is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239560,"byte_end":239636,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! destroyed right after the encryption process.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239637,"byte_end":239686,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239687,"byte_end":239690,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! Without knowing the secret key used for a given message, the sender cannot","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239691,"byte_end":239769,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"! decrypt its own message later. And without additional data, a message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239770,"byte_end":239843,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"! cannot be correlated with the identity of its sender.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239844,"byte_end":239901,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239902,"byte_end":239905,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! # Algorithm Details","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239906,"byte_end":239929,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"! Sealed boxes leverage the `crypto_box` construction (X25519, XSalsa20-Poly1305).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":239930,"byte_end":240014,"line_start":19,"line_end":19,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240015,"byte_end":240018,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! The format of a sealed box is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240019,"byte_end":240052,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240053,"byte_end":240056,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ```c","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240057,"byte_end":240065,"line_start":23,"line_end":23,"column_start":1,"column_end":9}},{"value":"! ephemeral_pk || box(m, recipient_pk, ephemeral_sk,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240066,"byte_end":240120,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"!                     nonce=blake2b(ephemeral_pk, recipient_pk))","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240121,"byte_end":240187,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240188,"byte_end":240195,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240196,"byte_end":240199,"line_start":27,"line_end":27,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve25519blake2bxsalsa20poly1305","qualname":"::crypto::sealedbox::curve25519blake2bxsalsa20poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" A particular combination of `Curve25519`, `Blake2B`, `XSalsa20` and `Poly1305`.\n","sig":null,"attributes":[{"value":"! A particular combination of `Curve25519`, `Blake2B`, `XSalsa20` and `Poly1305`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240297,"byte_end":240380,"line_start":1,"line_end":1,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240624,"byte_end":240633,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"SEALBYTES","qualname":"::crypto::sealedbox::curve25519blake2bxsalsa20poly1305::SEALBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of additional bytes in a ciphertext compared to the corresponding\n plaintext.\n","sig":null,"attributes":[{"value":"/ Number of additional bytes in a ciphertext compared to the corresponding","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240522,"byte_end":240598,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ plaintext.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240599,"byte_end":240613,"line_start":12,"line_end":12,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241045,"byte_end":241049,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"seal","qualname":"::crypto::sealedbox::curve25519blake2bxsalsa20poly1305::seal","value":"fn (m: &[u8], pk: &box_::PublicKey) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" The `seal()` function encrypts a message `m` for a recipient whose public key\n is `pk`. It returns the ciphertext whose length is `SEALBYTES + m.len()`.","sig":null,"attributes":[{"value":"/ The `seal()` function encrypts a message `m` for a recipient whose public key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240680,"byte_end":240761,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/ is `pk`. It returns the ciphertext whose length is `SEALBYTES + m.len()`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240762,"byte_end":240839,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240840,"byte_end":240843,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The function creates a new key pair for each message, and attaches the public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240844,"byte_end":240925,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/ key to the ciphertext. The secret key is overwritten and is not accessible","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":240926,"byte_end":241004,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ after this function returns.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241005,"byte_end":241037,"line_start":20,"line_end":20,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241801,"byte_end":241805,"line_start":45,"line_end":45,"column_start":8,"column_end":12},"name":"open","qualname":"::crypto::sealedbox::curve25519blake2bxsalsa20poly1305::open","value":"fn (c: &[u8], pk: &box_::PublicKey, sk: &box_::SecretKey) -> Result<Vec<u8>, ()>","parent":null,"children":[],"decl_id":null,"docs":" The `open()` function decrypts the ciphertext `c` using the key pair `(pk, sk)`\n and returns the decrypted message.","sig":null,"attributes":[{"value":"/ The `open()` function decrypts the ciphertext `c` using the key pair `(pk, sk)`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241327,"byte_end":241410,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/ and returns the decrypted message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241411,"byte_end":241449,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241450,"byte_end":241453,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Key pairs are compatible with other","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241454,"byte_end":241493,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ `crypto::box_::curve25519xsalsa20poly1305` operations and can be created","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241494,"byte_end":241570,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ using `crypto::box::gen_keypair()`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241571,"byte_end":241610,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241611,"byte_end":241614,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This function doesn't require passing the public key of the sender, as the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241615,"byte_end":241693,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ ciphertext already includes this information.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241694,"byte_end":241743,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241744,"byte_end":241747,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If decryption fails it returns `Err(())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\curve25519blake2bxsalsa20poly1305.rs","byte_start":241748,"byte_end":241793,"line_start":44,"line_end":44,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"secretbox","qualname":"::crypto::secretbox","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"decl_id":null,"docs":" Secret-key authenticated encryption","sig":null,"attributes":[{"value":"! Secret-key authenticated encryption","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243138,"byte_end":243177,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243178,"byte_end":243181,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243182,"byte_end":243202,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The `seal()` function is designed to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243203,"byte_end":243284,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"! authenticity for a secret-key authenticated-encryption scheme using nonces. For","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243285,"byte_end":243368,"line_start":5,"line_end":5,"column_start":1,"column_end":84}},{"value":"! formal definitions see, e.g., Bellare and Namprempre, \"Authenticated","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243369,"byte_end":243441,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"! encryption: relations among notions and analysis of the generic composition","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243442,"byte_end":243521,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! paradigm,\" Lecture Notes in Computer Science 1976 (2000), 531–545,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243522,"byte_end":243594,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"! <http://www-cse.ucsd.edu/~mihir/papers/oem.html>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243595,"byte_end":243648,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243649,"byte_end":243652,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Note that the length is not hidden. Note also that it is the caller's","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243653,"byte_end":243726,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"! responsibility to ensure the uniqueness of nonces—for example, by using","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243727,"byte_end":243804,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"! nonce 1 for the first message, nonce 2 for the second message, etc.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243805,"byte_end":243876,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"! Nonces are long enough that randomly generated nonces have negligible","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243877,"byte_end":243950,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"! risk of collision.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243951,"byte_end":243973,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243974,"byte_end":243977,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":243978,"byte_end":244002,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"! `seal()` is `crypto_secretbox_xsalsa20poly1305`, a particular","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244003,"byte_end":244068,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"! combination of Salsa20 and Poly1305 specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244069,"byte_end":244121,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244122,"byte_end":244184,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244185,"byte_end":244188,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! This function is conjectured to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244189,"byte_end":244265,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"! authenticity.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244266,"byte_end":244283,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244284,"byte_end":244287,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244288,"byte_end":244301,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244302,"byte_end":244309,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::secretbox;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244310,"byte_end":244349,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"! let key = secretbox::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244350,"byte_end":244385,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"! let nonce = secretbox::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244386,"byte_end":244425,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"! let plaintext = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244426,"byte_end":244459,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"! let ciphertext = secretbox::seal(plaintext, &nonce, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244460,"byte_end":244522,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"! let their_plaintext = secretbox::open(&ciphertext, &nonce, &key).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244523,"byte_end":244601,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"! assert!(plaintext == &their_plaintext[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244602,"byte_end":244649,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244650,"byte_end":244657,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xsalsa20poly1305","qualname":"::crypto::secretbox::xsalsa20poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":2785},{"krate":0,"index":2795},{"krate":0,"index":2797},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2819},{"krate":0,"index":2821},{"krate":0,"index":2824},{"krate":0,"index":2827},{"krate":0,"index":2830},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2838},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2845},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2852},{"krate":0,"index":2867},{"krate":0,"index":2869},{"krate":0,"index":2872},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2881},{"krate":0,"index":2887},{"krate":0,"index":2889},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2900},{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2907},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2914},{"krate":0,"index":2929},{"krate":0,"index":2931},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2949},{"krate":0,"index":2951},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" `crypto_secretbox_xsalsa20poly1305`, a particular\n combination of Salsa20 and Poly1305 specified in\n [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","sig":null,"attributes":[{"value":"! `crypto_secretbox_xsalsa20poly1305`, a particular","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244721,"byte_end":244774,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"! combination of Salsa20 and Poly1305 specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244775,"byte_end":244827,"line_start":2,"line_end":2,"column_start":1,"column_end":53}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html).","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244828,"byte_end":244890,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244891,"byte_end":244894,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! This function is conjectured to meet the standard notions of privacy and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244895,"byte_end":244971,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"! authenticity.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":244972,"byte_end":244989,"line_start":6,"line_end":6,"column_start":1,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245121,"byte_end":245129,"line_start":14,"line_end":14,"column_start":11,"column_end":19},"name":"KEYBYTES","qualname":"::crypto::secretbox::xsalsa20poly1305::KEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in `Key`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in `Key`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245081,"byte_end":245110,"line_start":13,"line_end":13,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245242,"byte_end":245252,"line_start":17,"line_end":17,"column_start":11,"column_end":21},"name":"NONCEBYTES","qualname":"::crypto::secretbox::xsalsa20poly1305::NONCEBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Nonce`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Nonce`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245198,"byte_end":245231,"line_start":16,"line_end":16,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2785},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245486,"byte_end":245489,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"Key","qualname":"::crypto::secretbox::xsalsa20poly1305::Key","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Key` for symmetric authenticated encryption","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245688,"byte_end":245691,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"Tag","qualname":"::crypto::secretbox::xsalsa20poly1305::Tag","value":"","parent":null,"children":[],"decl_id":null,"docs":" Authentication `Tag` for the detached encryption mode","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2900},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245783,"byte_end":245788,"line_start":36,"line_end":36,"column_start":11,"column_end":16},"name":"Nonce","qualname":"::crypto::secretbox::xsalsa20poly1305::Nonce","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Nonce` for symmetric authenticated encryption\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12788,"byte_end":12799,"line_start":255,"line_end":255,"column_start":9,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245971,"byte_end":245979,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"MACBYTES","qualname":"::crypto::secretbox::xsalsa20poly1305::MACBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in the authenticator tag of an encrypted message\n i.e. the number of bytes by which the ciphertext is larger than the\n plaintext.\n","sig":null,"attributes":[{"value":"/ Number of bytes in the authenticator tag of an encrypted message","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245805,"byte_end":245873,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/ i.e. the number of bytes by which the ciphertext is larger than the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245874,"byte_end":245945,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ plaintext.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":245946,"byte_end":245960,"line_start":41,"line_end":41,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246268,"byte_end":246275,"line_start":49,"line_end":49,"column_start":8,"column_end":15},"name":"gen_key","qualname":"::crypto::secretbox::xsalsa20poly1305::gen_key","value":"fn () -> Key","parent":null,"children":[],"decl_id":null,"docs":" `gen_key()` randomly generates a secret key","sig":null,"attributes":[{"value":"/ `gen_key()` randomly generates a secret key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246048,"byte_end":246095,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246096,"byte_end":246099,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_key()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246100,"byte_end":246168,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246169,"byte_end":246238,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246239,"byte_end":246260,"line_start":48,"line_end":48,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246585,"byte_end":246594,"line_start":60,"line_end":60,"column_start":8,"column_end":17},"name":"gen_nonce","qualname":"::crypto::secretbox::xsalsa20poly1305::gen_nonce","value":"fn () -> Nonce","parent":null,"children":[],"decl_id":null,"docs":" `gen_nonce()` randomly generates a nonce","sig":null,"attributes":[{"value":"/ `gen_nonce()` randomly generates a nonce","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246368,"byte_end":246412,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246413,"byte_end":246416,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_key()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246417,"byte_end":246485,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246486,"byte_end":246555,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246556,"byte_end":246577,"line_start":59,"line_end":59,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246834,"byte_end":246838,"line_start":68,"line_end":68,"column_start":8,"column_end":12},"name":"seal","qualname":"::crypto::secretbox::xsalsa20poly1305::seal","value":"fn (m: &[u8], n: &Nonce, k: &Key) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" `seal()` encrypts and authenticates a message `m` using a secret key `k` and a\n nonce `n`.  It returns a ciphertext `c`.\n","sig":null,"attributes":[{"value":"/ `seal()` encrypts and authenticates a message `m` using a secret key `k` and a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246699,"byte_end":246781,"line_start":66,"line_end":66,"column_start":1,"column_end":83}},{"value":"/ nonce `n`.  It returns a ciphertext `c`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":246782,"byte_end":246826,"line_start":67,"line_end":67,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247454,"byte_end":247467,"line_start":87,"line_end":87,"column_start":8,"column_end":21},"name":"seal_detached","qualname":"::crypto::secretbox::xsalsa20poly1305::seal_detached","value":"fn (m: &mut [u8], n: &Nonce, k: &Key) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" `seal_detached()` encrypts and authenticates a message `m` using a secret key `k` and a nonce\n `n`.  `m` is encrypted in place, so after this function returns it will contain the ciphertext.\n The detached authentication tag is returned by value.\n","sig":null,"attributes":[{"value":"/ `seal_detached()` encrypts and authenticates a message `m` using a secret key `k` and a nonce","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247191,"byte_end":247288,"line_start":84,"line_end":84,"column_start":1,"column_end":98}},{"value":"/ `n`.  `m` is encrypted in place, so after this function returns it will contain the ciphertext.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247289,"byte_end":247388,"line_start":85,"line_end":85,"column_start":1,"column_end":100}},{"value":"/ The detached authentication tag is returned by value.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247389,"byte_end":247446,"line_start":86,"line_end":86,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247998,"byte_end":248002,"line_start":105,"line_end":105,"column_start":8,"column_end":12},"name":"open","qualname":"::crypto::secretbox::xsalsa20poly1305::open","value":"fn (c: &[u8], n: &Nonce, k: &Key) -> Result<Vec<u8>, ()>","parent":null,"children":[],"decl_id":null,"docs":" `open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.\n It returns a plaintext `Ok(m)`.\n If the ciphertext fails verification, `open()` returns `Err(())`.\n","sig":null,"attributes":[{"value":"/ `open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247793,"byte_end":247884,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ It returns a plaintext `Ok(m)`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247885,"byte_end":247920,"line_start":103,"line_end":103,"column_start":1,"column_end":36}},{"value":"/ If the ciphertext fails verification, `open()` returns `Err(())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":247921,"byte_end":247990,"line_start":104,"line_end":104,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":248858,"byte_end":248871,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"open_detached","qualname":"::crypto::secretbox::xsalsa20poly1305::open_detached","value":"fn (c: &mut [u8], tag: &Tag, n: &Nonce, k: &Key) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" `open_detached()` verifies and decrypts a ciphertext `c` and and authentication tag `tag`,\n using a secret key `k` and a nonce `n`. `c` is decrypted in place, so if this function is\n successful it will contain the plaintext. If the ciphertext fails verification,\n `open_detached()` returns `Err(())`, and the ciphertext is not modified.\n","sig":null,"attributes":[{"value":"/ `open_detached()` verifies and decrypts a ciphertext `c` and and authentication tag `tag`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":248501,"byte_end":248595,"line_start":128,"line_end":128,"column_start":1,"column_end":95}},{"value":"/ using a secret key `k` and a nonce `n`. `c` is decrypted in place, so if this function is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":248596,"byte_end":248689,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ successful it will contain the plaintext. If the ciphertext fails verification,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":248690,"byte_end":248773,"line_start":130,"line_end":130,"column_start":1,"column_end":84}},{"value":"/ `open_detached()` returns `Err(())`, and the ciphertext is not modified.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\xsalsa20poly1305.rs","byte_start":248774,"byte_end":248850,"line_start":131,"line_end":131,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"secretstream","qualname":"::crypto::secretstream","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360}],"decl_id":null,"docs":" Stream encryption/file encryption","sig":null,"attributes":[{"value":"! Stream encryption/file encryption","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256732,"byte_end":256769,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256770,"byte_end":256773,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This high-level API encrypts a sequence of messages, or a single message split into an arbitrary","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256774,"byte_end":256874,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"! number of chunks, using a secret key, with the following properties:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256875,"byte_end":256947,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256948,"byte_end":256951,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! * Messages cannot be truncated, removed, reordered, duplicated or modified without this being","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":256952,"byte_end":257049,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"!   detected by the decryption functions.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257050,"byte_end":257093,"line_start":7,"line_end":7,"column_start":1,"column_end":44}},{"value":"! * The same sequence encrypted twice will produce different ciphertexts.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257094,"byte_end":257169,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! * An authentication tag is added to each encrypted message: stream corruption will be detected","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257170,"byte_end":257268,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"!   early, without having to read the stream until the end.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257269,"byte_end":257330,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! * Each message can include additional data (ex: timestamp, protocol version) in the computation","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257331,"byte_end":257430,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"!   of the authentication tag.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257431,"byte_end":257463,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"! * Messages can have different sizes.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257464,"byte_end":257504,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! * There are no practical limits to the total length of the stream,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257505,"byte_end":257575,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"!   or to the total number of individual messages.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257576,"byte_end":257628,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"! * Ratcheting: at any point in the stream, it is possible to \"forget\" the key used to encrypt","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257629,"byte_end":257725,"line_start":16,"line_end":16,"column_start":1,"column_end":97}},{"value":"!   the previous messages, and switch to a new key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257726,"byte_end":257779,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257780,"byte_end":257783,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! This API can be used to securely send an ordered sequence of messages to a peer.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257784,"byte_end":257868,"line_start":19,"line_end":19,"column_start":1,"column_end":85}},{"value":"! Since the length of the stream is not limited, it can also be used to encrypt files","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257869,"byte_end":257956,"line_start":20,"line_end":20,"column_start":1,"column_end":88}},{"value":"! regardless of their size.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257957,"byte_end":257986,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257987,"byte_end":257990,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! It transparently generates nonces and automatically handles key rotation.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":257991,"byte_end":258068,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258069,"byte_end":258072,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! The `crypto_secretstream_*()` API was introduced in libsodium 1.0.14.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258073,"byte_end":258146,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258147,"byte_end":258150,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258151,"byte_end":258164,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258165,"byte_end":258172,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::secretstream::{gen_key, Stream, Tag};","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258173,"byte_end":258239,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258240,"byte_end":258243,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! let msg1 = \"some message 1\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258244,"byte_end":258276,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"! let msg2 = \"other message\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258277,"byte_end":258308,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"! let msg3 = \"final message\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258309,"byte_end":258340,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258341,"byte_end":258344,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! // initialize encrypt secret stream","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258345,"byte_end":258384,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"! let key = gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258385,"byte_end":258409,"line_start":36,"line_end":36,"column_start":1,"column_end":25}},{"value":"! let (mut enc_stream, header) = Stream::init_push(&key).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258410,"byte_end":258478,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258479,"byte_end":258482,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! // encrypt first message, tagging it as message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258483,"byte_end":258535,"line_start":39,"line_end":39,"column_start":1,"column_end":53}},{"value":"! let ciphertext1 = enc_stream.push(msg1.as_bytes(), None, Tag::Message).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258536,"byte_end":258620,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258621,"byte_end":258624,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! // encrypt second message, tagging it as push.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258625,"byte_end":258675,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"! let ciphertext2 = enc_stream.push(msg2.as_bytes(), None, Tag::Push).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258676,"byte_end":258757,"line_start":43,"line_end":43,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258758,"byte_end":258761,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! // encrypt third message, tagging it as final.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258762,"byte_end":258812,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"! let ciphertext3 = enc_stream.push(msg3.as_bytes(), None, Tag::Final).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258813,"byte_end":258895,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258896,"byte_end":258899,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! // initialize decrypt secret stream","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258900,"byte_end":258939,"line_start":48,"line_end":48,"column_start":1,"column_end":40}},{"value":"! let mut dec_stream = Stream::init_pull(&header, &key).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":258940,"byte_end":259007,"line_start":49,"line_end":49,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259008,"byte_end":259011,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! // decrypt first message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259012,"byte_end":259041,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"! assert!(!dec_stream.is_finalized());","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259042,"byte_end":259082,"line_start":52,"line_end":52,"column_start":1,"column_end":41}},{"value":"! let (decrypted1, tag1) = dec_stream.pull(&ciphertext1, None).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259083,"byte_end":259157,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! assert_eq!(tag1, Tag::Message);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259158,"byte_end":259193,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"! assert_eq!(msg1.as_bytes(), &decrypted1[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259194,"byte_end":259243,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259244,"byte_end":259247,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! // decrypt second message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259248,"byte_end":259278,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"! assert!(!dec_stream.is_finalized());","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259279,"byte_end":259319,"line_start":58,"line_end":58,"column_start":1,"column_end":41}},{"value":"! let (decrypted2, tag2) = dec_stream.pull(&ciphertext2, None).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259320,"byte_end":259394,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"! assert_eq!(tag2, Tag::Push);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259395,"byte_end":259427,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"! assert_eq!(msg2.as_bytes(), &decrypted2[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259428,"byte_end":259477,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259478,"byte_end":259481,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! // decrypt last message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259482,"byte_end":259510,"line_start":63,"line_end":63,"column_start":1,"column_end":29}},{"value":"! assert!(!dec_stream.is_finalized());","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259511,"byte_end":259551,"line_start":64,"line_end":64,"column_start":1,"column_end":41}},{"value":"! let (decrypted3, tag3) = dec_stream.pull(&ciphertext3, None).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259552,"byte_end":259626,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"! assert_eq!(tag3, Tag::Final);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259627,"byte_end":259660,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"! assert_eq!(msg3.as_bytes(), &decrypted3[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259661,"byte_end":259710,"line_start":67,"line_end":67,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259711,"byte_end":259714,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! // dec_stream is now finalized.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259715,"byte_end":259750,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"! assert!(dec_stream.is_finalized());","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259751,"byte_end":259790,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259791,"byte_end":259794,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259795,"byte_end":259802,"line_start":72,"line_end":72,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\xchacha20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xchacha20poly1305","qualname":"::crypto::secretstream::xchacha20poly1305","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\xchacha20poly1305.rs","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":3010},{"krate":0,"index":3025},{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3021},{"krate":0,"index":3019},{"krate":0,"index":2969},{"krate":0,"index":3027},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3046},{"krate":0,"index":3061},{"krate":0,"index":3063},{"krate":0,"index":3066},{"krate":0,"index":3069},{"krate":0,"index":3072},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":3080},{"krate":0,"index":3084},{"krate":0,"index":3085},{"krate":0,"index":3087},{"krate":0,"index":3090},{"krate":0,"index":3091},{"krate":0,"index":3094},{"krate":0,"index":3109},{"krate":0,"index":3111},{"krate":0,"index":3114},{"krate":0,"index":3117},{"krate":0,"index":3120},{"krate":0,"index":3123},{"krate":0,"index":3129},{"krate":0,"index":3131},{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":2971},{"krate":0,"index":2973},{"krate":0,"index":2978},{"krate":0,"index":2983},{"krate":0,"index":2992},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3008},{"krate":0,"index":3009}],"decl_id":null,"docs":" `crypto_secretstream_xchacha20poly1305`\n","sig":null,"attributes":[{"value":"! `crypto_secretstream_xchacha20poly1305`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\xchacha20poly1305.rs","byte_start":274805,"byte_end":274848,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"shorthash","qualname":"::crypto::shorthash","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" A lot of applications and programming language implementations have been\n recently found to be vulnerable to denial-of-service attacks when a hash\n function with weak security guarantees, like Murmurhash 3, was used to\n construct a hash table.","sig":null,"attributes":[{"value":"! A lot of applications and programming language implementations have been","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286360,"byte_end":286436,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! recently found to be vulnerable to denial-of-service attacks when a hash","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286437,"byte_end":286513,"line_start":2,"line_end":2,"column_start":1,"column_end":77}},{"value":"! function with weak security guarantees, like Murmurhash 3, was used to","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286514,"byte_end":286588,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"! construct a hash table.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286589,"byte_end":286616,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286617,"byte_end":286620,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! In order to address this, Sodium provides the `shorthash()` function.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286621,"byte_end":286694,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"! This very fast hash functions outputs short, but unpredictable","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286695,"byte_end":286761,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"! (without knowing the secret key) values suitable for picking a list in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286762,"byte_end":286836,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"! a hash table for a given key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286837,"byte_end":286870,"line_start":9,"line_end":9,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286871,"byte_end":286874,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286875,"byte_end":286899,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"! `shorthash()` is currently an implementation of `SipHash-2-4` as specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286900,"byte_end":286981,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"! [`SipHash`: a fast short-input PRF](https://131002.net/siphash/)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":286982,"byte_end":287050,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287051,"byte_end":287054,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287055,"byte_end":287068,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287069,"byte_end":287076,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::shorthash;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287077,"byte_end":287116,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287117,"byte_end":287120,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! let key = shorthash::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287121,"byte_end":287156,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! let data_to_hash = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287157,"byte_end":287193,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"! let digest = shorthash::shorthash(data_to_hash, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287194,"byte_end":287252,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287253,"byte_end":287260,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"siphash24","qualname":"::crypto::shorthash::siphash24","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":3139},{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3153},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3173},{"krate":0,"index":3176},{"krate":0,"index":3179},{"krate":0,"index":3182},{"krate":0,"index":3188},{"krate":0,"index":3190},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3195},{"krate":0,"index":3205},{"krate":0,"index":3207},{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3214},{"krate":0,"index":3229},{"krate":0,"index":3231},{"krate":0,"index":3234},{"krate":0,"index":3237},{"krate":0,"index":3240},{"krate":0,"index":3199},{"krate":0,"index":3200},{"krate":0,"index":3203},{"krate":0,"index":384},{"krate":0,"index":386}],"decl_id":null,"docs":" `SipHash-2-4`\n","sig":null,"attributes":[{"value":"! `SipHash-2-4`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287310,"byte_end":287327,"line_start":1,"line_end":1,"column_start":1,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287442,"byte_end":287453,"line_start":8,"line_end":8,"column_start":11,"column_end":22},"name":"DIGESTBYTES","qualname":"::crypto::shorthash::siphash24::DIGESTBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Digest`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Digest`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287397,"byte_end":287431,"line_start":7,"line_end":7,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287554,"byte_end":287562,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"KEYBYTES","qualname":"::crypto::shorthash::siphash24::KEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Key`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Key`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287512,"byte_end":287543,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3139},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287674,"byte_end":287680,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Digest","qualname":"::crypto::shorthash::siphash24::Digest","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Digest` structure\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3195},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287815,"byte_end":287818,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"Key","qualname":"::crypto::shorthash::siphash24::Key","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Key`","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":288060,"byte_end":288067,"line_start":30,"line_end":30,"column_start":8,"column_end":15},"name":"gen_key","qualname":"::crypto::shorthash::siphash24::gen_key","value":"fn () -> Key","parent":null,"children":[],"decl_id":null,"docs":" `gen_key()` randomly generates a key for shorthash","sig":null,"attributes":[{"value":"/ `gen_key()` randomly generates a key for shorthash","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287833,"byte_end":287887,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287888,"byte_end":287891,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_key()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287892,"byte_end":287960,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":287961,"byte_end":288030,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":288031,"byte_end":288052,"line_start":29,"line_end":29,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":288242,"byte_end":288251,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"shorthash","qualname":"::crypto::shorthash::siphash24::shorthash","value":"fn (m: &[u8], k: &Key) -> Digest","parent":null,"children":[],"decl_id":null,"docs":" `shorthash` hashes a message `m` under a key `k`. It\n returns a hash `h`.\n","sig":null,"attributes":[{"value":"/ `shorthash` hashes a message `m` under a key `k`. It","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":288154,"byte_end":288210,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/ returns a hash `h`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\siphash24.rs","byte_start":288211,"byte_end":288234,"line_start":37,"line_end":37,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::crypto::sign","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390}],"decl_id":null,"docs":" Public-key signatures","sig":null,"attributes":[{"value":"! Public-key signatures","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":293913,"byte_end":293938,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":293939,"byte_end":293942,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Security model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":293943,"byte_end":293963,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"! The [`sign()`](ed25519/fn.sign.html) function is designed to meet the standard","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":293964,"byte_end":294046,"line_start":4,"line_end":4,"column_start":1,"column_end":83}},{"value":"! notion of unforgeability for a public-key signature scheme under","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294047,"byte_end":294115,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"! chosen-message attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294116,"byte_end":294143,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294144,"byte_end":294147,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294148,"byte_end":294172,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"! [`crypto::sign::sign`](ed25519/fn.sign.html) is `ed25519`, a signature scheme specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294173,"byte_end":294267,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"! [Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294268,"byte_end":294349,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"! standard notion of unforgeability for a public-key signature scheme under","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294350,"byte_end":294427,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"! chosen-message attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294428,"byte_end":294455,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294456,"byte_end":294459,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! # Alternate primitives","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294460,"byte_end":294486,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294487,"byte_end":294490,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! ----------------------------------------------------------------------------------","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294491,"byte_end":294577,"line_start":16,"line_end":16,"column_start":1,"column_end":87}},{"value":"! |`crypto_sign`                         | PUBLICKEYBYTES | SECRETKEYBYTES | BYTES |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294578,"byte_end":294664,"line_start":17,"line_end":17,"column_start":1,"column_end":87}},{"value":"! |--------------------------------------|----------------|----------------|-------|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294665,"byte_end":294751,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"! |`crypto_sign_ed25519`                 | 32             | 64             | 64    |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294752,"byte_end":294838,"line_start":19,"line_end":19,"column_start":1,"column_end":87}},{"value":"! |`crypto_sign_edwards25519sha512batch` | 32             | 64             | 64    |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294839,"byte_end":294925,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294926,"byte_end":294929,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! `crypto_sign_edwards25519sha512batch` is a prototype. It has been replaced with","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":294930,"byte_end":295013,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"! Ed25519 and is only kept here for compatibility reasons.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295014,"byte_end":295074,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295075,"byte_end":295078,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295079,"byte_end":295092,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295093,"byte_end":295100,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::sign;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295101,"byte_end":295135,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"! let (pk, sk) = sign::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295136,"byte_end":295175,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"! let data_to_sign = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295176,"byte_end":295212,"line_start":29,"line_end":29,"column_start":1,"column_end":37}},{"value":"! let signed_data = sign::sign(data_to_sign, &sk);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295213,"byte_end":295265,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"! let verified_data = sign::verify(&signed_data, &pk).unwrap();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295266,"byte_end":295331,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"! assert!(data_to_sign == &verified_data[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295332,"byte_end":295380,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295381,"byte_end":295388,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295389,"byte_end":295392,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! # Example (detached signatures)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295393,"byte_end":295428,"line_start":35,"line_end":35,"column_start":1,"column_end":36}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295429,"byte_end":295436,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::sign;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295437,"byte_end":295471,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"! let (pk, sk) = sign::gen_keypair();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295472,"byte_end":295511,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"! let data_to_sign = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295512,"byte_end":295548,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"! let signature = sign::sign_detached(data_to_sign, &sk);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295549,"byte_end":295608,"line_start":40,"line_end":40,"column_start":1,"column_end":60}},{"value":"! assert!(sign::verify_detached(&signature, data_to_sign, &pk));","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295609,"byte_end":295675,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295676,"byte_end":295683,"line_start":42,"line_end":42,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ed25519","qualname":"::crypto::sign::ed25519","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":3245},{"krate":0,"index":3255},{"krate":0,"index":3257},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3264},{"krate":0,"index":3279},{"krate":0,"index":3281},{"krate":0,"index":3284},{"krate":0,"index":3287},{"krate":0,"index":3290},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3295},{"krate":0,"index":3305},{"krate":0,"index":3307},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3314},{"krate":0,"index":3329},{"krate":0,"index":3331},{"krate":0,"index":3334},{"krate":0,"index":3337},{"krate":0,"index":3340},{"krate":0,"index":3299},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":399},{"krate":0,"index":3348},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3355},{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3362},{"krate":0,"index":3377},{"krate":0,"index":3379},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3388},{"krate":0,"index":3391},{"krate":0,"index":3397},{"krate":0,"index":3399},{"krate":0,"index":3345},{"krate":0,"index":3346},{"krate":0,"index":3407},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3414},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3421},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3441},{"krate":0,"index":3444},{"krate":0,"index":3447},{"krate":0,"index":3450},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":3463},{"krate":0,"index":3468},{"krate":0,"index":3466},{"krate":0,"index":413},{"krate":0,"index":419},{"krate":0,"index":421}],"decl_id":null,"docs":" `ed25519`, a signature scheme specified in\n [Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the\n standard notion of unforgeability for a public-key signature scheme under\n chosen-message attacks.\n","sig":null,"attributes":[{"value":"! `ed25519`, a signature scheme specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":295728,"byte_end":295774,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"! [Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":295775,"byte_end":295856,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"! standard notion of unforgeability for a public-key signature scheme under","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":295857,"byte_end":295934,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"! chosen-message attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":295935,"byte_end":295962,"line_start":4,"line_end":4,"column_start":1,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296113,"byte_end":296122,"line_start":14,"line_end":14,"column_start":11,"column_end":20},"name":"SEEDBYTES","qualname":"::crypto::sign::ed25519::SEEDBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Seed`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Seed`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296070,"byte_end":296102,"line_start":13,"line_end":13,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296226,"byte_end":296240,"line_start":17,"line_end":17,"column_start":11,"column_end":25},"name":"SECRETKEYBYTES","qualname":"::crypto::sign::ed25519::SECRETKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `SecretKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296178,"byte_end":296215,"line_start":16,"line_end":16,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296349,"byte_end":296363,"line_start":20,"line_end":20,"column_start":11,"column_end":25},"name":"PUBLICKEYBYTES","qualname":"::crypto::sign::ed25519::PUBLICKEYBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `PublicKey`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `PublicKey`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296301,"byte_end":296338,"line_start":19,"line_end":19,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296472,"byte_end":296486,"line_start":23,"line_end":23,"column_start":11,"column_end":25},"name":"SIGNATUREBYTES","qualname":"::crypto::sign::ed25519::SIGNATUREBYTES","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes in a `Signature`.\n","sig":null,"attributes":[{"value":"/ Number of bytes in a `Signature`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296424,"byte_end":296461,"line_start":22,"line_end":22,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3245},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296819,"byte_end":296823,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Seed","qualname":"::crypto::sign::ed25519::Seed","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Seed` that can be used for keypair generation","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3295},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":296990,"byte_end":296999,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::crypto::sign::ed25519::SecretKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `SecretKey` for signatures","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":11351,"byte_end":11362,"line_start":209,"line_end":209,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297132,"byte_end":297142,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey>::public_key","value":"fn (&self) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" `public_key()` computes the corresponding public key for a given secret key\n","sig":null,"attributes":[{"value":"/ `public_key()` computes the corresponding public key for a given secret key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297041,"byte_end":297120,"line_start":45,"line_end":45,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":3348},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297408,"byte_end":297417,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::crypto::sign::ed25519::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" `PublicKey` for signatures\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3407},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297488,"byte_end":297497,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"Signature","qualname":"::crypto::sign::ed25519::Signature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Detached signature\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\newtype_macros.rs","byte_start":12149,"byte_end":12160,"line_start":235,"line_end":235,"column_start":9,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297782,"byte_end":297793,"line_start":71,"line_end":71,"column_start":8,"column_end":19},"name":"gen_keypair","qualname":"::crypto::sign::ed25519::gen_keypair","value":"fn () -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `gen_keypair()` randomly generates a secret key and a corresponding public\n key.","sig":null,"attributes":[{"value":"/ `gen_keypair()` randomly generates a secret key and a corresponding public","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297518,"byte_end":297596,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ key.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297597,"byte_end":297605,"line_start":66,"line_end":66,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297606,"byte_end":297609,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ THREAD SAFETY: `gen_keypair()` is thread-safe provided that you have","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297610,"byte_end":297682,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/ called `sodiumoxide::init()` once before using any other function","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297683,"byte_end":297752,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/ from sodiumoxide.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297753,"byte_end":297774,"line_start":70,"line_end":70,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298146,"byte_end":298163,"line_start":82,"line_end":82,"column_start":8,"column_end":25},"name":"keypair_from_seed","qualname":"::crypto::sign::ed25519::keypair_from_seed","value":"fn (seed: &Seed) -> (PublicKey, SecretKey)","parent":null,"children":[],"decl_id":null,"docs":" `keypair_from_seed()` computes a secret key and a corresponding public key\n from a `Seed`.\n","sig":null,"attributes":[{"value":"/ `keypair_from_seed()` computes a secret key and a corresponding public key","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298041,"byte_end":298119,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ from a `Seed`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298120,"byte_end":298138,"line_start":81,"line_end":81,"column_start":1,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298623,"byte_end":298627,"line_start":97,"line_end":97,"column_start":8,"column_end":12},"name":"sign","qualname":"::crypto::sign::ed25519::sign","value":"fn (m: &[u8], sk: &SecretKey) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" `sign()` signs a message `m` using the signer's secret key `sk`.\n `sign()` returns the resulting signed message `sm`.\n","sig":null,"attributes":[{"value":"/ `sign()` signs a message `m` using the signer's secret key `sk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298491,"byte_end":298559,"line_start":95,"line_end":95,"column_start":1,"column_end":69}},{"value":"/ `sign()` returns the resulting signed message `sm`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298560,"byte_end":298615,"line_start":96,"line_end":96,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299195,"byte_end":299201,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"verify","qualname":"::crypto::sign::ed25519::verify","value":"fn (sm: &[u8], pk: &PublicKey) -> Result<Vec<u8>, ()>","parent":null,"children":[],"decl_id":null,"docs":" `verify()` verifies the signature in `sm` using the signer's public key `pk`.\n `verify()` returns the message `Ok(m)`.\n If the signature fails verification, `verify()` returns `Err(())`.\n","sig":null,"attributes":[{"value":"/ `verify()` verifies the signature in `sm` using the signer's public key `pk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":298991,"byte_end":299072,"line_start":113,"line_end":113,"column_start":1,"column_end":82}},{"value":"/ `verify()` returns the message `Ok(m)`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299073,"byte_end":299116,"line_start":114,"line_end":114,"column_start":1,"column_end":44}},{"value":"/ If the signature fails verification, `verify()` returns `Err(())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299117,"byte_end":299187,"line_start":115,"line_end":115,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299783,"byte_end":299796,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"sign_detached","qualname":"::crypto::sign::ed25519::sign_detached","value":"fn (m: &[u8], sk: &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" `sign_detached()` signs a message `m` using the signer's secret key `sk`.\n `sign_detached()` returns the resulting signature `sig`.\n","sig":null,"attributes":[{"value":"/ `sign_detached()` signs a message `m` using the signer's secret key `sk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299637,"byte_end":299714,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/ `sign_detached()` returns the resulting signature `sig`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":299715,"byte_end":299775,"line_start":137,"line_end":137,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300416,"byte_end":300431,"line_start":157,"line_end":157,"column_start":8,"column_end":23},"name":"verify_detached","qualname":"::crypto::sign::ed25519::verify_detached","value":"fn (sig: &Signature, m: &[u8], pk: &PublicKey) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `verify_detached()` verifies the signature in `sig` against the message `m`\n and the signer's public key `pk`.\n `verify_detached()` returns true if the signature is valid, false otherwise.\n","sig":null,"attributes":[{"value":"/ `verify_detached()` verifies the signature in `sig` against the message `m`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300210,"byte_end":300289,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ and the signer's public key `pk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300290,"byte_end":300327,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ `verify_detached()` returns true if the signature is valid, false otherwise.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300328,"byte_end":300408,"line_start":156,"line_end":156,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":3463},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300803,"byte_end":300808,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"name":"State","qualname":"::crypto::sign::ed25519::State","value":"","parent":null,"children":[],"decl_id":null,"docs":" State for multi-part (streaming) computation of signature.\n","sig":null,"attributes":[{"value":"/ State for multi-part (streaming) computation of signature.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300706,"byte_end":300768,"line_start":169,"line_end":169,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300924,"byte_end":300928,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"init","qualname":"<State>::init","value":"fn () -> State","parent":null,"children":[],"decl_id":null,"docs":" `init()` initialize a streaming signing state.\n","sig":null,"attributes":[{"value":"/ `init()` initialize a streaming signing state.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300862,"byte_end":300912,"line_start":174,"line_end":174,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":301315,"byte_end":301321,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"update","qualname":"<State>::update","value":"fn (&mut self, m: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" `update()` can be called more than once in order to compute the digest\n from sequential chunks of the message.\n","sig":null,"attributes":[{"value":"/ `update()` can be called more than once in order to compute the digest","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":301182,"byte_end":301256,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"/ from sequential chunks of the message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":301261,"byte_end":301303,"line_start":185,"line_end":185,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":301668,"byte_end":301676,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"finalize","qualname":"<State>::finalize","value":"fn (mut self, &SecretKey(ref sk): &SecretKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" `finalize()` finalizes the hashing computation and returns a `Signature`.\n","sig":null,"attributes":[{"value":"/ `finalize()` finalizes the hashing computation and returns a `Signature`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":301479,"byte_end":301556,"line_start":192,"line_end":192,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302220,"byte_end":302226,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"verify","qualname":"<State>::verify","value":"fn (&mut self, &Signature(ref sig): &Signature, &PublicKey(ref pk): &PublicKey) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `veriry` verifies the signature in `sm` using the signer's public key `pk`.\n","sig":null,"attributes":[{"value":"/ `veriry` verifies the signature in `sm` using the signer's public key `pk`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302129,"byte_end":302208,"line_start":210,"line_end":210,"column_start":5,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::crypto::stream","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":434},{"krate":0,"index":441},{"krate":0,"index":448}],"decl_id":null,"docs":" Secret-key encryption","sig":null,"attributes":[{"value":"! Secret-key encryption","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":312900,"byte_end":312925,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":312926,"byte_end":312929,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Note","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":312930,"byte_end":312940,"line_start":3,"line_end":3,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":312941,"byte_end":312944,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Generally speaking [`crypto::secretstream`](../secretstream/index.html) provides a more","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":312945,"byte_end":313036,"line_start":5,"line_end":5,"column_start":1,"column_end":92}},{"value":"! straightforward API for authenticated encryption with associated data","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313037,"byte_end":313110,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"! (AEAD) and should be used when this is desired. By contrast, the `stream`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313111,"byte_end":313188,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"! module is more appropriate for use cases such as when a variable-length","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313189,"byte_end":313264,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! pseudorandom function is needed. [`crypto::secretstream`](../secretstream/index.html)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313265,"byte_end":313354,"line_start":9,"line_end":9,"column_start":1,"column_end":90}},{"value":"! also guarantees messages cannot be truncated, removed, reordered, duplicated, or modified,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313355,"byte_end":313449,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"! among other useful guarantees. See the module documentation for more information.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313450,"byte_end":313535,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313536,"byte_end":313539,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! # Security Model","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313540,"byte_end":313560,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"! The `stream()` function, viewed as a function of the nonce for a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313561,"byte_end":313629,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"! uniform random key, is designed to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313630,"byte_end":313696,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"! unpredictability (\"PRF\"). For a formal definition see, e.g., Section 2.3","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313697,"byte_end":313773,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"! of Bellare, Kilian, and Rogaway, \"The security of the cipher block","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313774,"byte_end":313844,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"! chaining message authentication code,\" Journal of Computer and System","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313845,"byte_end":313918,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"! Sciences 61 (2000), 362–399;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313919,"byte_end":313953,"line_start":19,"line_end":19,"column_start":1,"column_end":33}},{"value":"! <http://www-cse.ucsd.edu/~mihir/papers/cbc.html>.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":313954,"byte_end":314007,"line_start":20,"line_end":20,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314008,"byte_end":314011,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! This means that an attacker cannot distinguish this function from a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314012,"byte_end":314083,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"! uniform random function. Consequently, if a series of messages is","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314084,"byte_end":314153,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"! encrypted by `stream_xor()` with a different nonce for each message,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314154,"byte_end":314226,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"! the ciphertexts are indistinguishable from uniform random strings of the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314227,"byte_end":314303,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"! same length.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314304,"byte_end":314320,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314321,"byte_end":314324,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! Note that the length is not hidden. Note also that it is the caller's","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314325,"byte_end":314398,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"! responsibility to ensure the uniqueness of nonces—for example, by using","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314399,"byte_end":314476,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"! nonce 1 for the first message, nonce 2 for the second message, etc.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314477,"byte_end":314548,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"! Nonces are long enough that randomly generated nonces have negligible","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314549,"byte_end":314622,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"! risk of collision.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314623,"byte_end":314645,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314646,"byte_end":314649,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! `NaCl` does not make any promises regarding the resistance of `stream()` to","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314650,"byte_end":314729,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"! \"related-key attacks.\" It is the caller's responsibility to use proper","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314730,"byte_end":314804,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"! key-derivation functions.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314805,"byte_end":314834,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314835,"byte_end":314838,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! # Selected primitive","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314839,"byte_end":314863,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"! `stream()` is `crypto_stream_xsalsa20`, a particular cipher specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314864,"byte_end":314940,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 7.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":314941,"byte_end":315014,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"! This cipher is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315015,"byte_end":315076,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"! unpredictability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315077,"byte_end":315098,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315099,"byte_end":315102,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! # Alternate primitives","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315103,"byte_end":315129,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"! NaCl supports the following secret-key encryption functions:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315130,"byte_end":315194,"line_start":45,"line_end":45,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315195,"byte_end":315198,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! --------------------------------------------------------------","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315199,"byte_end":315265,"line_start":47,"line_end":47,"column_start":1,"column_end":67}},{"value":"! |`crypto_stream`           |primitive   |KEYBYTES |NONCEBYTES|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315266,"byte_end":315332,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"! |--------------------------|------------|---------|----------|","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315333,"byte_end":315399,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"! |`crypto_stream_chacha20`  |Chacha20/20 |32       |8         |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315400,"byte_end":315466,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"! |`crypto_stream_salsa20`   |Salsa20/20  |32       |8         |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315467,"byte_end":315533,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"! |`crypto_stream_xsalsa20`  |XSalsa20/20 |32       |24        |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315534,"byte_end":315600,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"! |`crypto_stream_xchacha20` |XChacha20/20|32       |24        |","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315601,"byte_end":315667,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315668,"byte_end":315671,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! Beware that several of these primitives have 8-byte nonces. For those","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315672,"byte_end":315745,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"! primitives it is no longer true that randomly generated nonces have negligible","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315746,"byte_end":315828,"line_start":56,"line_end":56,"column_start":1,"column_end":83}},{"value":"! risk of collision. Callers who are unable to count 1, 2, 3..., and who insist","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315829,"byte_end":315910,"line_start":57,"line_end":57,"column_start":1,"column_end":82}},{"value":"! on using these primitives, are advised to use a randomly derived key for each","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315911,"byte_end":315992,"line_start":58,"line_end":58,"column_start":1,"column_end":82}},{"value":"! message.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":315993,"byte_end":316005,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316006,"byte_end":316009,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! # Example (keystream generation)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316010,"byte_end":316046,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316047,"byte_end":316054,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::stream;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316055,"byte_end":316091,"line_start":63,"line_end":63,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316092,"byte_end":316095,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! let key = stream::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316096,"byte_end":316128,"line_start":65,"line_end":65,"column_start":1,"column_end":33}},{"value":"! let nonce = stream::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316129,"byte_end":316165,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"! let keystream = stream::stream(128, &nonce, &key); // generate 128 bytes of keystream","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316166,"byte_end":316255,"line_start":67,"line_end":67,"column_start":1,"column_end":90}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316256,"byte_end":316263,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316264,"byte_end":316267,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! # Example (encryption)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316268,"byte_end":316294,"line_start":70,"line_end":70,"column_start":1,"column_end":27}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316295,"byte_end":316302,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::stream;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316303,"byte_end":316339,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316340,"byte_end":316343,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! let key = stream::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316344,"byte_end":316376,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"! let nonce = stream::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316377,"byte_end":316413,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"! let plaintext = b\"some data\";","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316414,"byte_end":316447,"line_start":76,"line_end":76,"column_start":1,"column_end":34}},{"value":"! let ciphertext = stream::stream_xor(plaintext, &nonce, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316448,"byte_end":316513,"line_start":77,"line_end":77,"column_start":1,"column_end":66}},{"value":"! let their_plaintext = stream::stream_xor(&ciphertext, &nonce, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316514,"byte_end":316586,"line_start":78,"line_end":78,"column_start":1,"column_end":73}},{"value":"! assert_eq!(plaintext, &their_plaintext[..]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316587,"byte_end":316635,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316636,"byte_end":316643,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316644,"byte_end":316647,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! # Example (in place encryption)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316648,"byte_end":316683,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316684,"byte_end":316691,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"! use sodiumoxide::crypto::stream;","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316692,"byte_end":316728,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316729,"byte_end":316732,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! let key = stream::gen_key();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316733,"byte_end":316765,"line_start":86,"line_end":86,"column_start":1,"column_end":33}},{"value":"! let nonce = stream::gen_nonce();","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316766,"byte_end":316802,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"! let plaintext = &mut [0, 1, 2, 3];","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316803,"byte_end":316841,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"! // encrypt the plaintext","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316842,"byte_end":316870,"line_start":89,"line_end":89,"column_start":1,"column_end":29}},{"value":"! stream::stream_xor_inplace(plaintext, &nonce, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316871,"byte_end":316927,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"! // decrypt the plaintext","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316928,"byte_end":316956,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"! stream::stream_xor_inplace(plaintext, &nonce, &key);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":316957,"byte_end":317013,"line_start":92,"line_end":92,"column_start":1,"column_end":57}},{"value":"! assert_eq!(plaintext, &mut [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317014,"byte_end":317059,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"! ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317060,"byte_end":317067,"line_start":94,"line_end":94,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\chacha20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha20","qualname":"::crypto::stream::chacha20","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\chacha20.rs","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3482},{"krate":0,"index":3492},{"krate":0,"index":3494},{"krate":0,"index":3497},{"krate":0,"index":3498},{"krate":0,"index":3501},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":3527},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3490},{"krate":0,"index":3538},{"krate":0,"index":3542},{"krate":0,"index":3543},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3549},{"krate":0,"index":3552},{"krate":0,"index":3567},{"krate":0,"index":3569},{"krate":0,"index":3572},{"krate":0,"index":3575},{"krate":0,"index":3578},{"krate":0,"index":3581},{"krate":0,"index":3587},{"krate":0,"index":3589},{"krate":0,"index":3532},{"krate":0,"index":3536},{"krate":0,"index":3473},{"krate":0,"index":3475},{"krate":0,"index":3477},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481}],"decl_id":null,"docs":" `crypto_stream_chacha20` (Chacha20)\n","sig":null,"attributes":[{"value":"! `crypto_stream_chacha20` (Chacha20)","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\chacha20.rs","byte_start":325318,"byte_end":325357,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\salsa20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"salsa20","qualname":"::crypto::stream::salsa20","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\salsa20.rs","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3597},{"krate":0,"index":3607},{"krate":0,"index":3617},{"krate":0,"index":3619},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3626},{"krate":0,"index":3641},{"krate":0,"index":3643},{"krate":0,"index":3646},{"krate":0,"index":3649},{"krate":0,"index":3652},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3615},{"krate":0,"index":3663},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3670},{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3677},{"krate":0,"index":3692},{"krate":0,"index":3694},{"krate":0,"index":3697},{"krate":0,"index":3700},{"krate":0,"index":3703},{"krate":0,"index":3706},{"krate":0,"index":3712},{"krate":0,"index":3714},{"krate":0,"index":3657},{"krate":0,"index":3661},{"krate":0,"index":3598},{"krate":0,"index":3600},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606}],"decl_id":null,"docs":" `crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in\n [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 7.  This\n cipher is conjectured to meet the standard notion of unpredictability.\n","sig":null,"attributes":[{"value":"! `crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\salsa20.rs","byte_start":328178,"byte_end":328252,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 7.  This","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\salsa20.rs","byte_start":328253,"byte_end":328332,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! cipher is conjectured to meet the standard notion of unpredictability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\salsa20.rs","byte_start":328333,"byte_end":328407,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xchacha20","qualname":"::crypto::stream::xchacha20","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":3719},{"krate":0,"index":3720},{"krate":0,"index":3721},{"krate":0,"index":3722},{"krate":0,"index":3732},{"krate":0,"index":3742},{"krate":0,"index":3744},{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3751},{"krate":0,"index":3766},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3774},{"krate":0,"index":3777},{"krate":0,"index":3736},{"krate":0,"index":3737},{"krate":0,"index":3740},{"krate":0,"index":3788},{"krate":0,"index":3792},{"krate":0,"index":3793},{"krate":0,"index":3795},{"krate":0,"index":3798},{"krate":0,"index":3799},{"krate":0,"index":3802},{"krate":0,"index":3817},{"krate":0,"index":3819},{"krate":0,"index":3822},{"krate":0,"index":3825},{"krate":0,"index":3828},{"krate":0,"index":3831},{"krate":0,"index":3837},{"krate":0,"index":3839},{"krate":0,"index":3782},{"krate":0,"index":3786},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731}],"decl_id":null,"docs":" `xchacha20`. The same construction as `xsalsa20` but using\n `chacha20` instead of `salsa20` as the underlying stream cipher.\n This cipher is conjectured to meet the standard notion of\n unpredictability.\n","sig":null,"attributes":[{"value":"! `xchacha20`. The same construction as `xsalsa20` but using","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","byte_start":329774,"byte_end":329836,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"! `chacha20` instead of `salsa20` as the underlying stream cipher.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","byte_start":329837,"byte_end":329905,"line_start":2,"line_end":2,"column_start":1,"column_end":69}},{"value":"! This cipher is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","byte_start":329906,"byte_end":329967,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"! unpredictability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xchacha20.rs","byte_start":329968,"byte_end":329989,"line_start":4,"line_end":4,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xsalsa20","qualname":"::crypto::stream::xsalsa20","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":3844},{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3857},{"krate":0,"index":3867},{"krate":0,"index":3869},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3876},{"krate":0,"index":3891},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3899},{"krate":0,"index":3902},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3865},{"krate":0,"index":3913},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3920},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3927},{"krate":0,"index":3942},{"krate":0,"index":3944},{"krate":0,"index":3947},{"krate":0,"index":3950},{"krate":0,"index":3953},{"krate":0,"index":3956},{"krate":0,"index":3962},{"krate":0,"index":3964},{"krate":0,"index":3907},{"krate":0,"index":3911},{"krate":0,"index":3848},{"krate":0,"index":3850},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3856}],"decl_id":null,"docs":" `crypto_stream_xsalsa20`, a particular cipher specified in\n [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 7.\n This cipher is conjectured to meet the standard notion of\n unpredictability.\n","sig":null,"attributes":[{"value":"! `crypto_stream_xsalsa20`, a particular cipher specified in","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","byte_start":330383,"byte_end":330445,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"! [Cryptography in `NaCl`](http://nacl.cr.yp.to/valid.html), Section 7.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","byte_start":330446,"byte_end":330519,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"! This cipher is conjectured to meet the standard notion of","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","byte_start":330520,"byte_end":330581,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"! unpredictability.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\xsalsa20.rs","byte_start":330582,"byte_end":330603,"line_start":4,"line_end":4,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verify","qualname":"::crypto::verify","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463}],"decl_id":null,"docs":" Constant-time comparison of fixed-size vecs\n","sig":null,"attributes":[{"value":"! Constant-time comparison of fixed-size vecs","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":335728,"byte_end":335775,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336364,"byte_end":336373,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"verify_16","qualname":"::crypto::verify::verify_16","value":"fn (x: &[u8; 16], y: &[u8; 16]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the\n same as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.","sig":null,"attributes":[{"value":"/ `verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":335787,"byte_end":335859,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"/ same as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":335860,"byte_end":335931,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":335932,"byte_end":335935,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This function is safe to use for secrets `x[0]`, `x[1]`, ..., `x[15]`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":335936,"byte_end":336010,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/ `y[0]`, `y[1]`, ..., `y[15]`. The time taken by `verify_16` is independent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336011,"byte_end":336089,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ of the contents of `x[0]`, `x[1]`, ..., `x[15]`, `y[0]`, `y[1]`, ..., `y[15]`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336090,"byte_end":336172,"line_start":10,"line_end":10,"column_start":1,"column_end":83}},{"value":"/ In contrast, the standard C comparison function `memcmp(x,y,16)` takes time","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336173,"byte_end":336252,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ that depends on the longest matching prefix of `x` and `y`, often allowing easy","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336253,"byte_end":336336,"line_start":12,"line_end":12,"column_start":1,"column_end":84}},{"value":"/ timing attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336337,"byte_end":336356,"line_start":13,"line_end":13,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337056,"byte_end":337065,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"verify_32","qualname":"::crypto::verify::verify_32","value":"fn (x: &[u8; 32], y: &[u8; 32]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the\n same as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.","sig":null,"attributes":[{"value":"/ `verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336481,"byte_end":336551,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ same as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336552,"byte_end":336623,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336624,"byte_end":336627,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This function is safe to use for secrets `x[0]`, `x[1]`, ..., `x[31]`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336628,"byte_end":336702,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ `y[0]`, `y[1]`, ..., `y[31]`. The time taken by `verify_32` is independent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336703,"byte_end":336781,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ of the contents of `x[0]`, `x[1]`, ..., `x[31]`, `y[0]`, `y[1]`, ..., `y[31]`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336782,"byte_end":336864,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/ In contrast, the standard C comparison function `memcmp(x,y,32)` takes time","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336865,"byte_end":336944,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ that depends on the longest matching prefix of `x` and `y`, often allowing easy","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":336945,"byte_end":337028,"line_start":25,"line_end":25,"column_start":1,"column_end":84}},{"value":"/ timing attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337029,"byte_end":337048,"line_start":26,"line_end":26,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337748,"byte_end":337757,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"verify_64","qualname":"::crypto::verify::verify_64","value":"fn (x: &[u8; 64], y: &[u8; 64]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `verify_64()` returns true if `x[0]`, `x[1]`, ..., `x[63]` are the\n same as `y[0]`, `y[1]`, ..., `y[63]`. Otherwise it returns `false`.","sig":null,"attributes":[{"value":"/ `verify_64()` returns true if `x[0]`, `x[1]`, ..., `x[63]` are the","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337173,"byte_end":337243,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ same as `y[0]`, `y[1]`, ..., `y[63]`. Otherwise it returns `false`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337244,"byte_end":337315,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337316,"byte_end":337319,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This function is safe to use for secrets `x[0]`, `x[1]`, ..., `x[63]`,","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337320,"byte_end":337394,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ `y[0]`, `y[1]`, ..., `y[63]`. The time taken by `verify_64` is independent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337395,"byte_end":337473,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ of the contents of `x[0]`, `x[1]`, ..., `x[63]`, `y[0]`, `y[1]`, ..., `y[63]`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337474,"byte_end":337556,"line_start":36,"line_end":36,"column_start":1,"column_end":83}},{"value":"/ In contrast, the standard C comparison function `memcmp(x,y,64)` takes time","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337557,"byte_end":337636,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ that depends on the longest matching prefix of `x` and `y`, often allowing easy","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337637,"byte_end":337720,"line_start":38,"line_end":38,"column_start":1,"column_end":84}},{"value":"/ timing attacks.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\verify.rs","byte_start":337721,"byte_end":337740,"line_start":39,"line_end":39,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79142,"byte_end":79151,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113487,"byte_end":113493,"line_start":17,"line_end":17,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113646,"byte_end":113652,"line_start":23,"line_end":23,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113863,"byte_end":113869,"line_start":33,"line_end":33,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113895,"byte_end":113901,"line_start":35,"line_end":35,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114011,"byte_end":114017,"line_start":42,"line_end":42,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114655,"byte_end":114661,"line_start":69,"line_end":69,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114797,"byte_end":114803,"line_start":76,"line_end":76,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":115279,"byte_end":115285,"line_start":88,"line_end":88,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":115784,"byte_end":115790,"line_start":101,"line_end":101,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":116293,"byte_end":116299,"line_start":114,"line_end":114,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":116791,"byte_end":116797,"line_start":127,"line_end":127,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107130,"byte_end":107135,"line_start":35,"line_end":35,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297025,"byte_end":297034,"line_start":44,"line_end":44,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300850,"byte_end":300855,"line_start":173,"line_end":173,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302552,"byte_end":302557,"line_start":224,"line_end":224,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302756,"byte_end":302761,"line_start":231,"line_end":231,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3406,"byte_end":3417,"line_start":103,"line_end":103,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3427,"byte_end":3432,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3442,"byte_end":3449,"line_start":105,"line_end":105,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3539,"byte_end":3543,"line_start":112,"line_end":112,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":35}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27582,"byte_end":27598,"line_start":47,"line_end":47,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":39}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27608,"byte_end":27629,"line_start":48,"line_end":48,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\aead\\mod.rs","byte_start":27639,"byte_end":27661,"line_start":49,"line_end":49,"column_start":9,"column_end":31},"ref_id":{"krate":0,"index":57}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3557,"byte_end":3561,"line_start":113,"line_end":113,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56312,"byte_end":56322,"line_start":73,"line_end":73,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":72}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56332,"byte_end":56342,"line_start":74,"line_end":74,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":82}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\auth\\mod.rs","byte_start":56352,"byte_end":56365,"line_start":75,"line_end":75,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":92}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3575,"byte_end":3579,"line_start":114,"line_end":114,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":102}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\mod.rs","byte_start":77135,"byte_end":77161,"line_start":78,"line_end":78,"column_start":9,"column_end":35},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3593,"byte_end":3604,"line_start":115,"line_end":115,"column_start":13,"column_end":24},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3618,"byte_end":3622,"line_start":116,"line_end":116,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":212}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118554,"byte_end":118560,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":216}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\hash\\mod.rs","byte_start":118570,"byte_end":118576,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":224}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3636,"byte_end":3638,"line_start":117,"line_end":117,"column_start":13,"column_end":15},"ref_id":{"krate":0,"index":232}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\kx\\mod.rs","byte_start":131553,"byte_end":131566,"line_start":39,"line_end":39,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":234}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3652,"byte_end":3663,"line_start":118,"line_end":118,"column_start":13,"column_end":24},"ref_id":{"krate":0,"index":252}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\onetimeauth\\mod.rs","byte_start":142052,"byte_end":142060,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":256}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3677,"byte_end":3683,"line_start":119,"line_end":119,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":262}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151177,"byte_end":151186,"line_start":71,"line_end":71,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":266}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151196,"byte_end":151206,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":281}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\pwhash\\mod.rs","byte_start":151216,"byte_end":151236,"line_start":73,"line_end":73,"column_start":9,"column_end":29},"ref_id":{"krate":0,"index":296}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3697,"byte_end":3707,"line_start":120,"line_end":120,"column_start":13,"column_end":23},"ref_id":{"krate":0,"index":320}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\scalarmult\\mod.rs","byte_start":232809,"byte_end":232819,"line_start":38,"line_end":38,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":322}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3721,"byte_end":3730,"line_start":121,"line_end":121,"column_start":13,"column_end":22},"ref_id":{"krate":0,"index":330}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sealedbox\\mod.rs","byte_start":240261,"byte_end":240294,"line_start":30,"line_end":30,"column_start":9,"column_end":42},"ref_id":{"krate":0,"index":332}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3744,"byte_end":3753,"line_start":122,"line_end":122,"column_start":13,"column_end":22},"ref_id":{"krate":0,"index":339}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretbox\\mod.rs","byte_start":244702,"byte_end":244718,"line_start":37,"line_end":37,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":341}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3767,"byte_end":3779,"line_start":123,"line_end":123,"column_start":13,"column_end":25},"ref_id":{"krate":0,"index":356}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\secretstream\\mod.rs","byte_start":259885,"byte_end":259902,"line_start":76,"line_end":76,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":360}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3793,"byte_end":3802,"line_start":124,"line_end":124,"column_start":13,"column_end":22},"ref_id":{"krate":0,"index":376}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\shorthash\\mod.rs","byte_start":287298,"byte_end":287307,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":378}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3816,"byte_end":3820,"line_start":125,"line_end":125,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":388}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\mod.rs","byte_start":295718,"byte_end":295725,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":390}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3834,"byte_end":3840,"line_start":126,"line_end":126,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":423}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317136,"byte_end":317144,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":427}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317154,"byte_end":317161,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":434}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317171,"byte_end":317180,"line_start":101,"line_end":101,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":441}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\stream\\mod.rs","byte_start":317190,"byte_end":317198,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":448}},{"kind":"Mod","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\lib.rs","byte_start":3854,"byte_end":3860,"line_start":127,"line_end":127,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":455}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\box_\\curve25519xsalsa20poly1305.rs","byte_start":79142,"byte_end":79151,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113487,"byte_end":113493,"line_start":17,"line_end":17,"column_start":16,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113646,"byte_end":113652,"line_start":23,"line_end":23,"column_start":20,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":1588}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113863,"byte_end":113869,"line_start":33,"line_end":33,"column_start":13,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":1593}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":113895,"byte_end":113901,"line_start":35,"line_end":35,"column_start":22,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":1767}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114011,"byte_end":114017,"line_start":42,"line_end":42,"column_start":21,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":1625}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114655,"byte_end":114661,"line_start":69,"line_end":69,"column_start":14,"column_end":20},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":1614}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":114797,"byte_end":114803,"line_start":76,"line_end":76,"column_start":15,"column_end":21},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":115279,"byte_end":115285,"line_start":88,"line_end":88,"column_start":30,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":2099}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":115784,"byte_end":115790,"line_start":101,"line_end":101,"column_start":32,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":2099}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":116293,"byte_end":116299,"line_start":114,"line_end":114,"column_start":34,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":2099}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\digest.rs","byte_start":116791,"byte_end":116797,"line_start":127,"line_end":127,"column_start":27,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":2099}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\generichash\\mod.rs","byte_start":107130,"byte_end":107135,"line_start":35,"line_end":35,"column_start":6,"column_end":11},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":297025,"byte_end":297034,"line_start":44,"line_end":44,"column_start":6,"column_end":15},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":300850,"byte_end":300855,"line_start":173,"line_end":173,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302552,"byte_end":302557,"line_start":224,"line_end":224,"column_start":21,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3463},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sodiumoxide-0.2.5\\src\\crypto\\sign\\ed25519.rs","byte_start":302756,"byte_end":302761,"line_start":231,"line_end":231,"column_start":18,"column_end":23},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3463},"to":{"krate":2,"index":1843}}]}