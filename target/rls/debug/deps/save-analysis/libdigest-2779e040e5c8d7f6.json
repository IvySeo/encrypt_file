{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2","program":"C:\\Users\\M7\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","digest","C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=2779e040e5c8d7f6","-C","extra-filename=-2779e040e5c8d7f6","--out-dir","c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps","--extern","generic_array=c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\libgeneric_array-8bd9bcb21a9db771.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\M7\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\M7\\Desktop\\encrypt\\target\\rls\\debug\\deps\\libdigest-2779e040e5c8d7f6.rmeta"},"prelude":{"crate_id":{"name":"digest","disambiguator":[4477778075533662187,11547003920571140675]},"crate_root":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src","external_crates":[{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[4886921161452974022,9452701908620647308]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3203561457090851205,4632072058037203867]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3169376498131592849,9803978538207206865]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[7386957397098411889,9655149395429210794]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":5,"id":{"name":"typenum","disambiguator":[12832417595592109792,18021902360411686980]}},{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","num":6,"id":{"name":"nodrop","disambiguator":[4518267289988964254,11346759837790040181]}}],"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":0,"byte_end":2718,"line_start":1,"line_end":79,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":464,"byte_end":470,"line_start":16,"line_end":16,"column_start":17,"column_end":23},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":0,"byte_end":2718,"line_start":1,"line_end":79,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":42},{"krate":0,"index":62},{"krate":0,"index":61},{"krate":0,"index":59},{"krate":0,"index":57},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":51},{"krate":0,"index":49},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":44},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":39}],"decl_id":null,"docs":" This crate provides traits for describing funcionality of cryptographic hash\n functions.","sig":null,"attributes":[{"value":"! This crate provides traits for describing funcionality of cryptographic hash","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"! functions.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":81,"byte_end":95,"line_start":2,"line_end":2,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":96,"byte_end":99,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! By default std functionality in this crate disabled. (e.g. method for","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":100,"byte_end":173,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"! hashing `Read`ers) To enable it turn on `std` feature in your `Cargo.toml`","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":174,"byte_end":252,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"! for this crate.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":253,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"no_std","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":307,"byte_end":313,"line_start":7,"line_end":7,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3107,"byte_end":3113,"line_start":11,"line_end":11,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: Input + BlockInput + FixedOutput + Default","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21}],"decl_id":null,"docs":" The Digest trait specifies an interface common to digest functions. It's a\n convinience wrapper around `Input`, `FixedOutput`, `BlockInput` and\n `Default` traits. It also provides additional convinience methods.\n","sig":null,"attributes":[{"value":"/ The Digest trait specifies an interface common to digest functions. It's a","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":2875,"byte_end":2953,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ convinience wrapper around `Input`, `FixedOutput`, `BlockInput` and","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":2954,"byte_end":3025,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ `Default` traits. It also provides additional convinience methods.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3026,"byte_end":3096,"line_start":10,"line_end":10,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3202,"byte_end":3205,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"fn () -> Self","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Create new hasher instance\n","sig":null,"attributes":[{"value":"/ Create new hasher instance","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3164,"byte_end":3194,"line_start":12,"line_end":12,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3361,"byte_end":3366,"line_start":19,"line_end":19,"column_start":8,"column_end":13},"name":"input","qualname":"::digest::Digest::input","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[{"value":"/ Digest input data. This method can be called repeatedly","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3253,"byte_end":3312,"line_start":17,"line_end":17,"column_start":5,"column_end":64}},{"value":"/ for use with streaming messages.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3317,"byte_end":3353,"line_start":18,"line_end":18,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3511,"byte_end":3517,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"result","qualname":"::digest::Digest::result","value":"fn (self) -> Output<Self::OutputSize>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[{"value":"/ Retrieve the digest result. This method consumes digest instance.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3434,"byte_end":3503,"line_start":23,"line_end":23,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3873,"byte_end":3879,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"fn (data: &[u8]) -> Output<Self::OutputSize>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Convinience function to compute hash of the `data`. It will handle\n hasher creation, data feeding and finalization.","sig":null,"attributes":[{"value":"/ Convinience function to compute hash of the `data`. It will handle","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3593,"byte_end":3663,"line_start":28,"line_end":28,"column_start":5,"column_end":75}},{"value":"/ hasher creation, data feeding and finalization.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3668,"byte_end":3719,"line_start":29,"line_end":29,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3724,"byte_end":3727,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3732,"byte_end":3744,"line_start":31,"line_end":31,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3749,"byte_end":3752,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3757,"byte_end":3775,"line_start":33,"line_end":33,"column_start":5,"column_end":23}},{"value":"/ println!(\"{:x}\", sha2::Sha256::digest(b\"Hello world\"));","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3780,"byte_end":3839,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3844,"byte_end":3851,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3856,"byte_end":3865,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":4175,"byte_end":4185,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"digest_str","qualname":"::digest::Digest::digest_str","value":"fn (str: &str) -> Output<Self::OutputSize>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Convinience function to compute hash of the string. It's equivalent to\n `digest(input_string.as_bytes())`.\n","sig":null,"attributes":[{"value":"/ Convinience function to compute hash of the string. It's equivalent to","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":4036,"byte_end":4110,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ `digest(input_string.as_bytes())`.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":4115,"byte_end":4153,"line_start":44,"line_end":44,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":4158,"byte_end":4167,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":641,"byte_end":646,"line_start":22,"line_end":22,"column_start":11,"column_end":16},"name":"Input","qualname":"::Input","value":"Input","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" Trait for processing input data\n","sig":null,"attributes":[{"value":"/ Trait for processing input data","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":595,"byte_end":630,"line_start":21,"line_end":21,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":761,"byte_end":768,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"process","qualname":"::Input::process","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[{"value":"/ Digest input data. This method can be called repeatedly","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":653,"byte_end":712,"line_start":23,"line_end":23,"column_start":5,"column_end":64}},{"value":"/ for use with streaming messages.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":717,"byte_end":753,"line_start":24,"line_end":24,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":964,"byte_end":974,"line_start":30,"line_end":30,"column_start":11,"column_end":21},"name":"BlockInput","qualname":"::BlockInput","value":"BlockInput","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" Trait to indicate that digest function processes data in blocks of size\n `BlockSize`. Main usage of this trait is for implementing HMAC generically.\n","sig":null,"attributes":[{"value":"/ Trait to indicate that digest function processes data in blocks of size","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":798,"byte_end":873,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ `BlockSize`. Main usage of this trait is for implementing HMAC generically.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":874,"byte_end":953,"line_start":29,"line_end":29,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":986,"byte_end":995,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"BlockSize","qualname":"::BlockInput::BlockSize","value":"type BlockSize: ArrayLength<u8>;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1085,"byte_end":1096,"line_start":35,"line_end":35,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[{"value":"/ Trait for returning digest result with the fixed size","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1017,"byte_end":1074,"line_start":34,"line_end":34,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1108,"byte_end":1118,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::FixedOutput::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1219,"byte_end":1231,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"fixed_result","qualname":"::FixedOutput::fixed_result","value":"fn (self) -> GenericArray<u8, Self::OutputSize>","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[{"value":"/ Retrieve the digest result. This method consumes digest instance.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1142,"byte_end":1211,"line_start":38,"line_end":38,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1414,"byte_end":1427,"line_start":44,"line_end":44,"column_start":12,"column_end":25},"name":"InvalidLength","qualname":"::InvalidLength","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable digest output\n","sig":null,"attributes":[{"value":"/ The error type for variable digest output","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1280,"byte_end":1325,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1501,"byte_end":1515,"line_start":47,"line_end":47,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[{"value":"/ Trait for returning digest result with the varaible size","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1430,"byte_end":1490,"line_start":46,"line_end":46,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1764,"byte_end":1779,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"variable_result","qualname":"::VariableOutput::variable_result","value":"fn (self, buffer: &mut [u8]) -> Result<&[u8], InvalidLength>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Retrieve the digest result into provided buffer. Length of the output\n equals to the input buffer size. In case of invalid length\n `Err(InvalidLength)` will be returned.\n This method consumes digest instance.\n","sig":null,"attributes":[{"value":"/ Retrieve the digest result into provided buffer. Length of the output","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1523,"byte_end":1596,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ equals to the input buffer size. In case of invalid length","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1601,"byte_end":1663,"line_start":50,"line_end":50,"column_start":5,"column_end":67}},{"value":"/ `Err(InvalidLength)` will be returned.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1668,"byte_end":1710,"line_start":51,"line_end":51,"column_start":5,"column_end":47}},{"value":"/ This method consumes digest instance.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1715,"byte_end":1756,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1974,"byte_end":1983,"line_start":58,"line_end":58,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader: core::marker::Sized","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" Trait for decribing readers which are used to extract extendable output\n from the resulting state of hash function.\n","sig":null,"attributes":[{"value":"/ Trait for decribing readers which are used to extract extendable output","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1841,"byte_end":1916,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ from the resulting state of hash function.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1917,"byte_end":1963,"line_start":57,"line_end":57,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2094,"byte_end":2098,"line_start":60,"line_end":60,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"fn (&mut self, buffer: &mut [u8]) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called unlimited number of times.\n","sig":null,"attributes":[{"value":"/ Read output into the `buffer`. Can be called unlimited number of times.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2011,"byte_end":2086,"line_start":59,"line_end":59,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2343,"byte_end":2359,"line_start":66,"line_end":66,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Trait which describes extendable output (XOF) of hash functions. Using this\n trait you first need to get structure which implements `XofReader`, using\n which you can read extendable output.\n","sig":null,"attributes":[{"value":"/ Trait which describes extendable output (XOF) of hash functions. Using this","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2133,"byte_end":2212,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ trait you first need to get structure which implements `XofReader`, using","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2213,"byte_end":2290,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ which you can read extendable output.","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2291,"byte_end":2332,"line_start":65,"line_end":65,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2371,"byte_end":2377,"line_start":67,"line_end":67,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2451,"byte_end":2461,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"xof_result","qualname":"::ExtendableOutput::xof_result","value":"fn (self) -> Self::Reader","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Finalize hash function and return XOF reader\n","sig":null,"attributes":[{"value":"/ Finalize hash function and return XOF reader","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2395,"byte_end":2443,"line_start":69,"line_end":69,"column_start":5,"column_end":53}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":5255,"byte_end":5256,"line_start":84,"line_end":84,"column_start":64,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2533,"byte_end":2534,"line_start":73,"line_end":73,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3115,"byte_end":3120,"line_start":11,"line_end":11,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":25},"to":{"krate":0,"index":16}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3123,"byte_end":3133,"line_start":11,"line_end":11,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":16}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3136,"byte_end":3147,"line_start":11,"line_end":11,"column_start":40,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":29},"to":{"krate":0,"index":16}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":3150,"byte_end":3157,"line_start":11,"line_end":11,"column_start":54,"column_end":61},"kind":"SuperTrait","from":{"krate":1,"index":1843},"to":{"krate":0,"index":16}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\digest.rs","byte_start":5255,"byte_end":5256,"line_start":84,"line_end":84,"column_start":64,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":0,"index":16}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":1999,"byte_end":2004,"line_start":58,"line_end":58,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1857},"to":{"krate":0,"index":34}},{"span":{"file_name":"C:\\Users\\M7\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\digest-0.6.2\\src\\lib.rs","byte_start":2533,"byte_end":2534,"line_start":73,"line_end":73,"column_start":46,"column_end":47},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":0,"index":32}}]}